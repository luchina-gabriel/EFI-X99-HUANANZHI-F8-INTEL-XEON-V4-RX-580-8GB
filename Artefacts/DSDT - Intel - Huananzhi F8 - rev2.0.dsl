/*
 * Intel ACPI Component Architecture
 * AML/ASL+ Disassembler version 20200925 (64-bit version)
 * Copyright (c) 2000 - 2020 Intel Corporation
 * 
 * Disassembling to symbolic ASL+ operators
 *
 * Disassembly of iASLSR6PPJ.aml, Thu Jan  6 12:12:26 2022
 *
 * Original Table Header:
 *     Signature        "DSDT"
 *     Length           0x00032C38 (207928)
 *     Revision         0x02
 *     Checksum         0x2D
 *     OEM ID           "ALASKA"
 *     OEM Table ID     "A M I "
 *     OEM Revision     0x01072009 (17244169)
 *     Compiler ID      "INTL"
 *     Compiler Version 0x20091013 (537464851)
 */
DefinitionBlock ("", "DSDT", 2, "ALASKA", "A M I ", 0x01072009)
{
    Name (ENTK, 0x87)
    Name (EXTK, 0xAA)
    Name (IO1B, 0x0A00)
    Name (IO1L, 0x10)
    Name (IO2B, 0x0A10)
    Name (IO2L, 0x10)
    Name (IO3B, 0x0A20)
    Name (IO3L, 0x10)
    Name (IO4B, 0x0A30)
    Name (IO4L, 0x10)
    Name (SP1O, 0x2E)
    Name (IOES, 0x00)
    Name (ASSB, 0x00)
    Name (AOTB, 0x00)
    Name (AAXB, 0x00)
    Name (PEHP, 0x01)
    Name (PEPM, 0x01)
    Name (PEER, 0x01)
    Name (PECS, 0x01)
    Name (ITKE, 0x00)
    Name (MBEC, 0xFFFF)
    Name (PEBS, 0x80000000)
    Name (PELN, 0x10000000)
    Name (SRSI, 0xB2)
    Name (CSMI, 0x61)
    Name (SRCB, 0xFED1C000)
    Name (SRCL, 0x4000)
    Name (SUSW, 0xFF)
    Name (PMBA, 0x0400)
    Name (PMLN, 0x80)
    Name (SMCR, 0x0430)
    Name (SMIP, 0xB2)
    Name (APCB, 0xFEC00000)
    Name (APCL, 0x00100000)
    Name (PM30, 0x0430)
    Name (GPBS, 0x0500)
    Name (GPLN, 0x80)
    Name (SMBS, 0x0580)
    Name (SMBL, 0x20)
    Name (SHPC, 0x00)
    Name (PICM, 0x00)
    Method (_PIC, 1, NotSerialized)  // _PIC: Interrupt Model
    {
        If (Arg0)
        {
            DBG8 = 0xAA
        }
        Else
        {
            DBG8 = 0xAC
        }

        PICM = Arg0
    }

    Name (OSVR, Ones)
    Method (OSFL, 0, NotSerialized)
    {
        If ((OSVR != Ones))
        {
            Return (OSVR) /* \OSVR */
        }

        If ((PICM == 0x00))
        {
            DBG8 = 0xAC
        }

        OSVR = 0x03
        If (CondRefOf (\_OSI, Local0))
        {
            If (_OSI ("Windows 2001"))
            {
                OSVR = 0x04
            }

            If (_OSI ("Windows 2001.1"))
            {
                OSVR = 0x05
            }

            If (_OSI ("FreeBSD"))
            {
                OSVR = 0x06
            }

            If (_OSI ("HP-UX"))
            {
                OSVR = 0x07
            }

            If (_OSI ("OpenVMS"))
            {
                OSVR = 0x08
            }

            If (_OSI ("Windows 2001 SP1"))
            {
                OSVR = 0x09
            }

            If (_OSI ("Windows 2001 SP2"))
            {
                OSVR = 0x0A
            }

            If (_OSI ("Windows 2001 SP3"))
            {
                OSVR = 0x0B
            }

            If (_OSI ("Windows 2006"))
            {
                OSVR = 0x0C
            }

            If (_OSI ("Windows 2006 SP1"))
            {
                OSVR = 0x0D
            }

            If (_OSI ("Windows 2009"))
            {
                OSVR = 0x0E
            }

            If (_OSI ("Windows 2012"))
            {
                OSVR = 0x0F
            }

            If (_OSI ("Windows 2013"))
            {
                OSVR = 0x10
            }
        }
        Else
        {
            If (MCTH (_OS, "Microsoft Windows NT"))
            {
                OSVR = 0x00
            }

            If (MCTH (_OS, "Microsoft Windows"))
            {
                OSVR = 0x01
            }

            If (MCTH (_OS, "Microsoft WindowsME: Millennium Edition"))
            {
                OSVR = 0x02
            }

            If (MCTH (_OS, "Linux"))
            {
                OSVR = 0x03
            }

            If (MCTH (_OS, "FreeBSD"))
            {
                OSVR = 0x06
            }

            If (MCTH (_OS, "HP-UX"))
            {
                OSVR = 0x07
            }

            If (MCTH (_OS, "OpenVMS"))
            {
                OSVR = 0x08
            }
        }

        Return (OSVR) /* \OSVR */
    }

    Method (MCTH, 2, NotSerialized)
    {
        If ((SizeOf (Arg0) < SizeOf (Arg1)))
        {
            Return (Zero)
        }

        Local0 = (SizeOf (Arg0) + 0x01)
        Name (BUF0, Buffer (Local0){})
        Name (BUF1, Buffer (Local0){})
        BUF0 = Arg0
        BUF1 = Arg1
        While (Local0)
        {
            Local0--
            If ((DerefOf (BUF0 [Local0]) != DerefOf (BUF1 [Local0]
                )))
            {
                Return (Zero)
            }
        }

        Return (One)
    }

    Name (PRWP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (GPRW, 2, NotSerialized)
    {
        PRWP [0x00] = Arg0
        Local0 = (SS1 << 0x01)
        Local0 |= (SS2 << 0x02)
        Local0 |= (SS3 << 0x03)
        Local0 |= (SS4 << 0x04)
        If (((0x01 << Arg1) & Local0))
        {
            PRWP [0x01] = Arg1
        }
        Else
        {
            Local0 >>= 0x01
            If (((OSFL () == 0x01) || (OSFL () == 0x02)))
            {
                FindSetLeftBit (Local0, PRWP [0x01])
            }
            Else
            {
                FindSetRightBit (Local0, PRWP [0x01])
            }
        }

        Return (PRWP) /* \PRWP */
    }

    Name (WAKP, Package (0x02)
    {
        Zero, 
        Zero
    })
    Method (UPWP, 1, NotSerialized)
    {
        If (DerefOf (WAKP [0x00]))
        {
            WAKP [0x01] = 0x00
        }
        Else
        {
            WAKP [0x01] = Arg0
        }
    }

    OperationRegion (DEB0, SystemIO, 0x80, 0x01)
    Field (DEB0, ByteAcc, NoLock, Preserve)
    {
        DBG8,   8
    }

    OperationRegion (DEB1, SystemIO, 0x90, 0x02)
    Field (DEB1, WordAcc, NoLock, Preserve)
    {
        DBG9,   16
    }

    Name (SS1, 0x00)
    Name (SS2, 0x00)
    Name (SS3, 0x00)
    Name (SS4, 0x01)
    Name (IOST, 0x4400)
    Name (TOPM, 0x00000000)
    Name (ROMS, 0xFFE00000)
    Name (VGAF, 0x01)
    Name (OSHF, 0x00)
    Scope (_SB)
    {
        Name (XCNT, 0x00)
        Name (ECNT, 0x00)
        Name (OSYS, 0x00)
        Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("663e35af-cc10-41a4-88ea-5470af055295") /* Unknown UUID */))
            {
                Switch (ToInteger (Arg2))
                {
                    Case (0x00)
                    {
                        Switch (ToInteger (Arg1))
                        {
                            Case (0x00)
                            {
                                If ((EMCA == 0x01))
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x03                                             // .
                                    })
                                }
                                Else
                                {
                                    Return (Buffer (0x01)
                                    {
                                         0x00                                             // .
                                    })
                                }
                            }

                        }
                    }
                    Case (0x01)
                    {
                        Return (LDIR) /* \LDIR */
                    }
                    Default
                    {
                    }

                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }

        Method (_INI, 0, NotSerialized)  // _INI: Initialize
        {
            If (CondRefOf (_OSI, Local0))
            {
                If (_OSI ("Windows 2001.1 SP1"))
                {
                    OSYS = 0x05
                }

                If (_OSI ("Windows 2001.1"))
                {
                    OSYS = 0x06
                }

                If (_OSI ("Windows 2001 SP2"))
                {
                    OSYS = 0x07
                }

                If (_OSI ("Windows 2001"))
                {
                    OSYS = 0x08
                }

                If (_OSI ("Windows 2006.1"))
                {
                    OSYS = 0x09
                }

                If (_OSI ("Windows 2006 SP1"))
                {
                    OSYS = 0x0A
                }

                If (_OSI ("Windows 2006"))
                {
                    OSYS = 0x0B
                }

                If (_OSI ("Windows 2009"))
                {
                    OSYS = 0x0C
                }

                If (_OSI ("Windows 2012"))
                {
                    OSYS = 0x0D
                }

                If (_OSI ("Linux"))
                {
                    OSYS = 0x01
                }

                If (_OSI ("FreeBSD"))
                {
                    OSYS = 0x02
                }

                If (_OSI ("HP-UX"))
                {
                    OSYS = 0x03
                }

                If (_OSI ("OpenVMS"))
                {
                    OSYS = 0x04
                }

                If ((OSYS >= 0x0D))
                {
                    If ((XCNT == 0x00))
                    {
                        ^PCI0.XHCI.XSEL (0x00)
                        IO80 = 0x84
                        XCNT++
                    }
                }
                Else
                {
                    IO80 = OSYS /* \_SB_.OSYS */
                }
            }
        }
    }

    Name (BBI0, 0x00000000)
    Name (BBI1, 0x00000000)
    Name (BBI2, 0x00000000)
    Name (BBI3, 0x00000000)
    Name (BBU0, 0x000000FF)
    Name (BBU1, 0x000000FF)
    Name (BBU2, 0x000000FF)
    Name (BBU3, 0x000000FF)
    OperationRegion (DBG0, SystemIO, 0x80, 0x02)
    Field (DBG0, ByteAcc, NoLock, Preserve)
    {
        IO80,   8, 
        IO81,   8
    }

    OperationRegion (ACMS, SystemIO, 0x72, 0x02)
    Field (ACMS, ByteAcc, NoLock, Preserve)
    {
        INDX,   8, 
        DATA,   8
    }

    OperationRegion (GPCT, SystemIO, 0x0442, 0x01)
    Field (GPCT, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        SGPC,   1
    }

    OperationRegion (GPIV, SystemIO, 0x052C, 0x02)
    Field (GPIV, ByteAcc, NoLock, Preserve)
    {
        GP0I,   1, 
            ,   13, 
        RASI,   1
    }

    OperationRegion (PSYS, SystemMemory, 0x7B07B000, 0x0400)
    Field (PSYS, ByteAcc, NoLock, Preserve)
    {
        PLAT,   32, 
        APC0,   1, 
        APC1,   1, 
        APC2,   1, 
        APC3,   1, 
        APC4,   1, 
        Offset (0x05), 
        RES0,   8, 
        TPME,   1, 
        CSEN,   1, 
        C3EN,   1, 
        C6EN,   1, 
        C7EN,   1, 
        MWOS,   1, 
        PSEN,   1, 
        EMCA,   1, 
        HWAL,   1, 
        KPRS,   1, 
        MPRS,   1, 
        TSEN,   1, 
        FGTS,   1, 
        OSCX,   1, 
        RESX,   2, 
        CPHP,   8, 
        IIOP,   8, 
        IIOH,   8, 
        CPUT,   8, 
        PRBM,   32, 
        P0ID,   32, 
        P1ID,   32, 
        P2ID,   32, 
        P3ID,   32, 
        P0BM,   64, 
        P1BM,   64, 
        P2BM,   64, 
        P3BM,   64, 
        MEBM,   16, 
        MEBC,   16, 
        CFMM,   32, 
        TSSZ,   32, 
        M0BS,   64, 
        M1BS,   64, 
        M2BS,   64, 
        M3BS,   64, 
        M4BS,   64, 
        M5BS,   64, 
        M6BS,   64, 
        M7BS,   64, 
        M0RN,   64, 
        M1RN,   64, 
        M2RN,   64, 
        M3RN,   64, 
        M4RN,   64, 
        M5RN,   64, 
        M6RN,   64, 
        M7RN,   64, 
        SMI0,   32, 
        SMI1,   32, 
        SMI2,   32, 
        SMI3,   32, 
        SCI0,   32, 
        SCI1,   32, 
        SCI2,   32, 
        SCI3,   32, 
        MADD,   64, 
        CUU0,   128, 
        CUU1,   128, 
        CUU2,   128, 
        CUU3,   128, 
        CUU4,   128, 
        CUU5,   128, 
        CUU6,   128, 
        CUU7,   128, 
        CPSP,   8, 
        ME00,   128, 
        ME01,   128, 
        ME10,   128, 
        ME11,   128, 
        ME20,   128, 
        ME21,   128, 
        ME30,   128, 
        ME31,   128, 
        ME40,   128, 
        ME41,   128, 
        ME50,   128, 
        ME51,   128, 
        ME60,   128, 
        ME61,   128, 
        ME70,   128, 
        ME71,   128, 
        MESP,   16, 
        DHRD,   192, 
        ATSR,   192, 
        RHSA,   192, 
        LDIR,   64, 
        PRID,   32, 
        WSIC,   8, 
        WSIS,   16, 
        WSIB,   8, 
        WSID,   8, 
        WSIF,   8, 
        WSTS,   8, 
        WHEA,   8, 
        PFMA,   64, 
        PFMS,   8, 
        PFIO,   16, 
        CNBS,   8, 
        XHMD,   8, 
        SBV1,   8, 
        SBV2,   8, 
        SBS3,   8, 
        SBS4,   8, 
        AHPE,   8, 
        CLOD,   8, 
        HWEN,   2, 
        ACEN,   1, 
        ITMB,   2, 
        RES1,   3
    }

    OperationRegion (GSTS, SystemIO, 0x0422, 0x02)
    Field (GSTS, ByteAcc, NoLock, Preserve)
    {
        GP00,   1, 
            ,   12, 
        GP13,   1
    }

    OperationRegion (GPE0, SystemIO, 0x0428, 0x08)
    Field (GPE0, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPEH,   1, 
            ,   1, 
        USB1,   1, 
        USB2,   1, 
        USB5,   1, 
            ,   3, 
        PCIE,   1, 
            ,   1, 
        PMEE,   1, 
        USB3,   1, 
        PMB0,   1, 
        USB4,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        USB6,   1, 
        Offset (0x06)
    }

    OperationRegion (GPES, SystemIO, 0x0420, 0x08)
    Field (GPES, ByteAcc, NoLock, Preserve)
    {
            ,   1, 
        GPSH,   1, 
        SGPS,   1, 
        US1S,   1, 
        US2S,   1, 
        US5S,   1, 
            ,   1, 
        SMWS,   1, 
            ,   1, 
        PEES,   1, 
            ,   1, 
        PMES,   1, 
        US3S,   1, 
        PMBS,   1, 
        US4S,   1, 
        Offset (0x03), 
            ,   1, 
        Offset (0x04), 
        US6S,   1, 
        Offset (0x06)
    }

    Method (IPTS, 1, NotSerialized)
    {
        IO80 = 0x72
        US1S = 0x01
        US2S = 0x01
        US5S = 0x01
        SMWS = 0x01
        PMES = 0x01
        US3S = 0x01
        PMBS = 0x01
        US4S = 0x01
        US6S = 0x01
        GPEH = 0x01
        USB1 = 0x01
        USB2 = 0x01
        USB5 = 0x01
        PCIE = 0x01
        PMEE = 0x01
        USB3 = 0x01
        PMB0 = 0x01
        USB4 = 0x01
        USB6 = 0x01
        If ((Arg0 == 0x03))
        {
            \_SB.SMIS = 0xE0
            \_SB.SMIC = 0xBE
        }
    }

    Method (_GTS, 1, NotSerialized)  // _GTS: Going To Sleep
    {
        IO80 = Arg0
    }

    Scope (_SB)
    {
        Name (PRUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARUN, Package (0x54)
        {
            Package (0x04)
            {
                0x0008FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0008FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0009FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000AFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000BFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x000FFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0010FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0012FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0013FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0017FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0018FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0019FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001EFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x03, 
                0x00, 
                0x13
            }
        })
        Method (USTA, 1, NotSerialized)
        {
            Local6 = 0x00
            Local6 = (PRBM >> Arg0)
            Local6 &= 0x01
            If ((Local6 == 0x00))
            {
                Return (0x00)
            }
            Else
            {
                Return (0x0F)
            }
        }

        Device (UNC3)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xFF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU3) /* \BBU3 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x03))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC3._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC3._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC3.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC2)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0xBF)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU2) /* \BBU2 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x02))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC2._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC2._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC2.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC1)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0x7F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU1) /* \BBU1 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x01))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC1._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC1.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }

        Device (UNC0)
        {
            Name (_HID, EisaId ("PNP0A03") /* PCI Bus */)  // _HID: Hardware ID
            Name (_UID, 0x3F)  // _UID: Unique ID
            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BBU0) /* \BBU0 */
            }

            Name (_ADR, 0x00)  // _ADR: Address
            Name (_EJD, "\\_SB.SCK0")  // _EJD: Ejection Dependent Device
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Return (USTA (0x00))
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Method (_OSC, 4, NotSerialized)  // _OSC: Operating System Capabilities
            {
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                {
                    Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                }
                ElseIf ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.UNC0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.UNC0._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            ^^PCI1.QRP0.OSHP ()
                            ^^PCI1.QR1A.OSHP ()
                            ^^PCI1.QR1B.OSHP ()
                            ^^PCI1.QR2A.OSHP ()
                            ^^PCI1.QR2B.OSHP ()
                            ^^PCI1.QR2C.OSHP ()
                            ^^PCI1.QR2D.OSHP ()
                            ^^PCI1.QR3A.OSHP ()
                            ^^PCI1.QR3B.OSHP ()
                            ^^PCI1.QR3C.OSHP ()
                            ^^PCI1.QR3D.OSHP ()
                            ^^PCI2.RRP0.OSHP ()
                            ^^PCI2.RR1A.OSHP ()
                            ^^PCI2.RR1B.OSHP ()
                            ^^PCI2.RR2A.OSHP ()
                            ^^PCI2.RR2B.OSHP ()
                            ^^PCI2.RR2C.OSHP ()
                            ^^PCI2.RR2D.OSHP ()
                            ^^PCI2.RR3A.OSHP ()
                            ^^PCI2.RR3B.OSHP ()
                            ^^PCI2.RR3C.OSHP ()
                            ^^PCI2.RR3D.OSHP ()
                            ^^PCI3.SRP0.OSHP ()
                            ^^PCI3.SR1A.OSHP ()
                            ^^PCI3.SR1B.OSHP ()
                            ^^PCI3.SR2A.OSHP ()
                            ^^PCI3.SR2B.OSHP ()
                            ^^PCI3.SR2C.OSHP ()
                            ^^PCI3.SR2D.OSHP ()
                            ^^PCI3.SR3A.OSHP ()
                            ^^PCI3.SR3B.OSHP ()
                            ^^PCI3.SR3C.OSHP ()
                            ^^PCI3.SR3D.OSHP ()
                            GPSH = 0x01
                        }
                    }

                    If ((Arg1 != One))
                    {
                        CDW1 |= 0x08
                    }

                    If ((CDW3 != CTRL))
                    {
                        CDW1 |= 0x10
                    }

                    CDW3 = CTRL /* \_SB_.UNC0.CTRL */
                    Return (Arg3)
                }
                Else
                {
                    CDW1 |= 0x04
                    IO80 = 0xEE
                    Return (Arg3)
                }
            }

            Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x00FF,             // Range Minimum
                    0x00FF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, )
            })
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If ((PICM == Zero))
                {
                    Return (PRUN) /* \_SB_.PRUN */
                }

                Return (ARUN) /* \_SB_.ARUN */
            }
        }
    }

    Method (IWAK, 1, Serialized)
    {
        IO80 = 0x73
        Notify (\_SB.PCI0.EHC1, 0x00) // Bus Check
        Notify (\_SB.PCI0.EHC2, 0x00) // Bus Check
        If (((Arg0 == 0x03) || (Arg0 == 0x04)))
        {
            \_SB.PCI0.XHCI.XWAK ()
        }

        If ((Arg0 == 0x03))
        {
            \_SB.SMIS = 0xE1
            \_SB.SMIC = 0xBE
        }

        Return (Package (0x02)
        {
            0x00, 
            0x00
        })
    }

    Scope (_SB)
    {
        Scope (\_SB)
        {
            Method (PSTA, 1, NotSerialized)
            {
                Local6 = (PRBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (TMID, 2, NotSerialized)
            {
                Local0 = (Arg0 * 0x02)
                Local1 = (Local0 + Arg1)
                Return (Local1)
            }

            Name (APTC, Buffer (0x30)
            {
                /* 0000 */  0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C, 0x10,  // ........
                /* 0008 */  0x12, 0x14, 0x16, 0x18, 0x1A, 0x1C, 0x01, 0x03,  // ........
                /* 0010 */  0x05, 0x07, 0x09, 0x0B, 0x0D, 0x11, 0x13, 0x15,  // ........
                /* 0018 */  0x17, 0x19, 0x1B, 0x1D, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0020 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,  // ........
                /* 0028 */  0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF   // ........
            })
            Method (TPID, 2, NotSerialized)
            {
                Local0 = 0x00
                If ((Arg0 == 0x00))
                {
                    Local0 = P0ID /* \P0ID */
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = P1ID /* \P1ID */
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = P2ID /* \P2ID */
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = P3ID /* \P3ID */
                }

                Local0 += DerefOf (APTC [Arg1])
                Return (Local0)
            }

            Method (MSTA, 1, NotSerialized)
            {
                Local6 = (MEBM >> Arg0)
                Local6 &= 0x01
                If ((Local6 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Method (CSTA, 2, NotSerialized)
            {
                Local0 = 0x00
                Local1 = 0x00
                Local1 = TPID (Arg0, Arg1)
                Local2 = 0x00
                Local2 += DerefOf (APTC [Arg1])
                If ((Local2 == 0xFF))
                {
                    Return (0x00)
                }

                If ((Arg0 == 0x00))
                {
                    Local0 = (P0BM >> Local2)
                }

                If ((Arg0 == 0x01))
                {
                    Local0 = (P1BM >> Local2)
                }

                If ((Arg0 == 0x02))
                {
                    Local0 = (P2BM >> Local2)
                }

                If ((Arg0 == 0x03))
                {
                    Local0 = (P3BM >> Local2)
                }

                Local0 &= 0x01
                If ((Local0 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x01)
                }
            }

            Method (LAPC, 2, NotSerialized)
            {
                Name (APIC, Buffer (0x08){})
                CreateByteField (APIC, 0x00, TYPE)
                CreateByteField (APIC, 0x01, LLEN)
                CreateByteField (APIC, 0x02, PRID)
                CreateByteField (APIC, 0x03, APID)
                CreateDWordField (APIC, 0x04, FLAG)
                TYPE = 0x00
                LLEN = 0x08
                APID = TPID (Arg0, Arg1)
                If ((CSTA (Arg0, Arg1) == 0x00))
                {
                    FLAG = 0x00
                    PRID = 0xFF
                    APID = 0xFF
                }
                Else
                {
                    Local0 = APID /* \_SB_.LAPC.APID */
                    PRID = Local0
                    FLAG = 0x01
                }

                Return (APIC) /* \_SB_.LAPC.APIC */
            }

            Device (SCK0)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK0")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU0 = "CPUSCK0"
                    Local0 = PSTA (0x00)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P0BM /* \P0BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x00 | Local0))
                }

                Processor (CP00, 0x00, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x00))
                    }
                }

                Processor (CP01, 0x02, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x01))
                    }
                }

                Processor (CP02, 0x04, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x02))
                    }
                }

                Processor (CP03, 0x06, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x03))
                    }
                }

                Processor (CP04, 0x08, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x04))
                    }
                }

                Processor (CP05, 0x0A, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x05))
                    }
                }

                Processor (CP06, 0x0C, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x06))
                    }
                }

                Processor (CP07, 0x10, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x07))
                    }
                }

                Processor (CP08, 0x12, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x08))
                    }
                }

                Processor (CP09, 0x14, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x09))
                    }
                }

                Processor (CP0A, 0x16, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0A))
                    }
                }

                Processor (CP0B, 0x18, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0B))
                    }
                }

                Processor (CP0C, 0x1A, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0C))
                    }
                }

                Processor (CP0D, 0x1C, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0D))
                    }
                }

                Processor (CP0E, 0x01, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0E))
                    }
                }

                Processor (CP0F, 0x03, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x0F))
                    }
                }

                Processor (CP10, 0x05, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x10))
                    }
                }

                Processor (CP11, 0x07, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x11))
                    }
                }

                Processor (CP12, 0x09, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x12))
                    }
                }

                Processor (CP13, 0x0B, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x13))
                    }
                }

                Processor (CP14, 0x0D, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x14))
                    }
                }

                Processor (CP15, 0x11, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x15))
                    }
                }

                Processor (CP16, 0x13, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x16))
                    }
                }

                Processor (CP17, 0x15, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x17))
                    }
                }

                Processor (CP18, 0x17, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x18))
                    }
                }

                Processor (CP19, 0x19, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x19))
                    }
                }

                Processor (CP1A, 0x1B, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1A))
                    }
                }

                Processor (CP1B, 0x1D, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK0-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x00)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x00
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x00, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x00, 0x2F))
                    }
                }
            }

            Device (SCK1)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK1")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU1 = "CPUSCK1"
                    Local0 = PSTA (0x01)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P1BM /* \P1BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x0100 | Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK1-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x01)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x01
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x01, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x01, 0x2F))
                    }
                }
            }

            Device (SCK2)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK2")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU2 = "CPUSCK2"
                    Local0 = PSTA (0x02)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P2BM /* \P2BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x0200 | Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK2-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x02)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x02
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x02, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x02, 0x2F))
                    }
                }
            }

            Device (SCK3)
            {
                Name (_HID, "ACPI0004" /* Module Device */)  // _HID: Hardware ID
                Name (_UID, "CPUSCK3")  // _UID: Unique ID
                Name (LSTA, 0xFF)
                Method (_STA, 0, NotSerialized)  // _STA: Status
                {
                    CUU3 = "CPUSCK3"
                    Local0 = PSTA (0x03)
                    Local1 = (Local0 & 0x03)
                    If (((LSTA != 0xFF) && (Local1 != LSTA)))
                    {
                        If ((Local1 == 0x03)){}
                        Else
                        {
                        }
                    }

                    LSTA = Local1
                    Return (Local0)
                }

                Method (THNU, 0, NotSerialized)
                {
                    Local0 = 0x00
                    Local1 = P3BM /* \P3BM */
                    While (Local1)
                    {
                        Local0 += (Local1 & 0x01)
                        Local1 >>= 0x01
                    }

                    Return ((0x0300 | Local0))
                }

                Processor (CP00, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP00")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x00])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x00) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x00))
                    }
                }

                Processor (CP01, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP01")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x01])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x01) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x01))
                    }
                }

                Processor (CP02, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP02")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x02])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x02) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x02))
                    }
                }

                Processor (CP03, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP03")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x03])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x03) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x03))
                    }
                }

                Processor (CP04, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP04")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x04])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x04) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x04))
                    }
                }

                Processor (CP05, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP05")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x05])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x05) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x05))
                    }
                }

                Processor (CP06, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP06")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x06])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x06) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x06))
                    }
                }

                Processor (CP07, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP07")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x07])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x07) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x07))
                    }
                }

                Processor (CP08, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP08")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x08])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x08) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x08))
                    }
                }

                Processor (CP09, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP09")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x09])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x09) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x09))
                    }
                }

                Processor (CP0A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0A))
                    }
                }

                Processor (CP0B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0B))
                    }
                }

                Processor (CP0C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0C))
                    }
                }

                Processor (CP0D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0D))
                    }
                }

                Processor (CP0E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0E))
                    }
                }

                Processor (CP0F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP0F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x0F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x0F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x0F))
                    }
                }

                Processor (CP10, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP10")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x10])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x10) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x10))
                    }
                }

                Processor (CP11, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP11")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x11])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x11) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x11))
                    }
                }

                Processor (CP12, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP12")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x12])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x12) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x12))
                    }
                }

                Processor (CP13, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP13")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x13])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x13) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x13))
                    }
                }

                Processor (CP14, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP14")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x14])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x14) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x14))
                    }
                }

                Processor (CP15, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP15")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x15])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x15) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x15))
                    }
                }

                Processor (CP16, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP16")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x16])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x16) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x16))
                    }
                }

                Processor (CP17, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP17")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x17])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x17) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x17))
                    }
                }

                Processor (CP18, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP18")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x18])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x18) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x18))
                    }
                }

                Processor (CP19, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP19")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x19])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x19) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x19))
                    }
                }

                Processor (CP1A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1A))
                    }
                }

                Processor (CP1B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1B))
                    }
                }

                Processor (CP1C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1C))
                    }
                }

                Processor (CP1D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1D))
                    }
                }

                Processor (CP1E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1E))
                    }
                }

                Processor (CP1F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP1F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x1F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x1F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x1F))
                    }
                }

                Processor (CP20, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP20")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x20])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x20) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x20))
                    }
                }

                Processor (CP21, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP21")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x21])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x21) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x21))
                    }
                }

                Processor (CP22, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP22")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x22])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x22) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x22))
                    }
                }

                Processor (CP23, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP23")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x23])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x23) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x23))
                    }
                }

                Processor (CP24, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP24")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x24])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x24) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x24))
                    }
                }

                Processor (CP25, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP25")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x25])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x25) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x25))
                    }
                }

                Processor (CP26, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP26")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x26])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x26) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x26))
                    }
                }

                Processor (CP27, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP27")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x27])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x27) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x27))
                    }
                }

                Processor (CP28, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP28")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x28])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x28) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x28))
                    }
                }

                Processor (CP29, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP29")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x29])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x29) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x29))
                    }
                }

                Processor (CP2A, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2A")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2A])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2A) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2A))
                    }
                }

                Processor (CP2B, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2B")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2B])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2B) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2B))
                    }
                }

                Processor (CP2C, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2C")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2C])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2C) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2C))
                    }
                }

                Processor (CP2D, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2D")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2D])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2D) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2D))
                    }
                }

                Processor (CP2E, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2E")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2E])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2E) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2E))
                    }
                }

                Processor (CP2F, 0xFF, 0x00000410, 0x06)
                {
                    Name (_HID, "ACPI0007" /* Processor Device */)  // _HID: Hardware ID
                    Name (_UID, "SCK3-CP2F")  // _UID: Unique ID
                    Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
                    {
                        If ((CLOD == 0x00))
                        {
                            Return (0x03)
                        }
                        Else
                        {
                            Local0 = DerefOf (APTC [0x2F])
                            Local1 = CNBS /* \CNBS */
                            Local1 -= 0x01
                            Local0 >>= Local1
                            Local0 &= 0x01
                            Local1 = 0x03
                            Local1 *= 0x02
                            If ((Local0 == 0x01))
                            {
                                Local1 += 0x01
                            }

                            Return (Local1)
                        }
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((CSTA (0x03, 0x2F) == 0x00))
                        {
                            Return (0x00)
                        }
                        ElseIf ((OSYS >= 0x0C))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x0B)
                        }
                    }

                    Method (_MAT, 0, NotSerialized)  // _MAT: Multiple APIC Table Entry
                    {
                        Return (LAPC (0x03, 0x2F))
                    }
                }
            }
        }

        OperationRegion (IOB2, SystemIO, 0xB2, 0x02)
        Field (IOB2, ByteAcc, NoLock, Preserve)
        {
            SMIC,   8, 
            SMIS,   8
        }
    }

    Scope (_SB)
    {
        Name (PRSA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,7,10,11,12,14,15}
        })
        Alias (PRSA, PRSB)
        Name (PRSC, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, )
                {3,4,5,6,10,11,12,14,15}
        })
        Alias (PRSC, PRSD)
        Alias (PRSA, PRSE)
        Alias (PRSA, PRSF)
        Alias (PRSA, PRSG)
        Alias (PRSA, PRSH)
        Name (PG12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG12, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKC, 
                0x00
            }
        })
        Name (AG13, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x12
            }
        })
        Name (PG16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKB, 
                0x00
            }
        })
        Name (AG16, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x11
            }
        })
        Name (PD00, Package (0x24)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                LNKG, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR00, Package (0x24)
        {
            Package (0x04)
            {
                0x001FFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001FFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0014FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x001DFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001AFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001BFFFF, 
                0x00, 
                0x00, 
                0x16
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x0016FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x001CFFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x01, 
                0x00, 
                0x11
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x02, 
                0x00, 
                0x12
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x03, 
                0x00, 
                0x13
            }, 

            Package (0x04)
            {
                0x0011FFFF, 
                0x00, 
                0x00, 
                0x10
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x18
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x19
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x27
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x1F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x27
            }
        })
        Name (PG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG20, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x1D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x1E
            }
        })
        Name (PG21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG21, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x1B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x1E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x1C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x1D
            }
        })
        Name (PG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG22, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x20
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG23, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x21
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x24
            }
        })
        Name (PG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG24, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x22
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x25
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x26
            }
        })
        Name (PG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG25, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x23
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x24
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x26
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x25
            }
        })
        Name (PG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG26, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x28
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG27, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x29
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2C
            }
        })
        Name (PG28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG28, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2A
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2D
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2E
            }
        })
        Name (PG29, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AG29, Package (0x04)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x2B
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x2C
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x2E
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x2D
            }
        })
        Name (PD80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (AR80, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x30
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x31
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x32
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x34
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x35
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x36
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x38
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x3C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x3D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x3E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x40
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x44
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x45
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x46
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x3F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x37
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x3F
            }
        })
        Name (PDC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARC0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x48
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x49
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x4A
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x4C
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x4D
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x4E
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x50
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x54
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x55
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x56
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x58
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x5C
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x5D
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x5E
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x57
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x4F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x57
            }
        })
        Name (PDE0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                LNKD, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                LNKA, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                LNKB, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                LNKC, 
                0x00
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                LNKD, 
                0x00
            }
        })
        Name (ARE0, Package (0x14)
        {
            Package (0x04)
            {
                0xFFFF, 
                0x00, 
                0x00, 
                0x60
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x01, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x02, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0xFFFF, 
                0x03, 
                0x00, 
                0x61
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x00, 
                0x00, 
                0x62
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x01, 
                0x00, 
                0x64
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x02, 
                0x00, 
                0x65
            }, 

            Package (0x04)
            {
                0x0001FFFF, 
                0x03, 
                0x00, 
                0x66
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x00, 
                0x00, 
                0x68
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x01, 
                0x00, 
                0x6C
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x02, 
                0x00, 
                0x6D
            }, 

            Package (0x04)
            {
                0x0002FFFF, 
                0x03, 
                0x00, 
                0x6E
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x00, 
                0x00, 
                0x70
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x01, 
                0x00, 
                0x74
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x02, 
                0x00, 
                0x75
            }, 

            Package (0x04)
            {
                0x0003FFFF, 
                0x03, 
                0x00, 
                0x76
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x00, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x01, 
                0x00, 
                0x6F
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x02, 
                0x00, 
                0x67
            }, 

            Package (0x04)
            {
                0x0004FFFF, 
                0x03, 
                0x00, 
                0x6F
            }
        })
    }

    Scope (_SB)
    {
        Device (PCI0)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0x00)  // _ADR: Address
            Method (^BN00, 0, NotSerialized)
            {
                Return (0x00)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN00 ())
            }

            Name (_UID, 0x00)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR00) /* \_SB_.AR00 */
                }

                Return (PD00) /* \_SB_.PD00 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI0._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI0._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^BR1A.OSHP ()
                            ^BR1B.OSHP ()
                            ^BR2A.OSHP ()
                            ^BR2B.OSHP ()
                            ^BR2C.OSHP ()
                            ^BR2D.OSHP ()
                            ^BR3A.OSHP ()
                            ^BR3B.OSHP ()
                            ^BR3C.OSHP ()
                            ^BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI0._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Name (SUPP, 0x00)
            Name (CTRL, 0x00)
            Name (_PXM, 0x00)  // _PXM: Device Proximity
            Device (APIC)
            {
                Name (_HID, EisaId ("PNP0003") /* IO-APIC Interrupt Controller */)  // _HID: Hardware ID
                Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                {
                    Memory32Fixed (ReadOnly,
                        0xFEC00000,         // Address Base
                        0x00100000,         // Address Length
                        )
                })
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "PCI0PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }
            }

            Name (P0RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                IO (Decode16,
                    0x0CF8,             // Range Minimum
                    0x0CF8,             // Range Maximum
                    0x01,               // Alignment
                    0x08,               // Length
                    )
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x0CF7,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0CF8,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x1000,             // Range Minimum
                    0xFFFF,             // Range Maximum
                    0x0000,             // Translation Offset
                    0xF000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x000A0000,         // Range Minimum
                    0x000BFFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00020000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x90000000,         // Range Minimum
                    0xFBFFBFFF,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x6BFFC000,         // Length
                    ,, _Y00, AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000380000000000, // Range Minimum
                    0x0000383FFFFFFFFF, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000004000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            OperationRegion (TMEM, PCI_Config, 0x00, 0x0100)
            Field (TMEM, ByteAcc, NoLock, Preserve)
            {
                Offset (0x40), 
                    ,   4, 
                BSEG,   4, 
                PAMS,   48, 
                Offset (0x52), 
                DIM0,   4, 
                DIM1,   4, 
                Offset (0x54), 
                DIM2,   4
            }

            Name (MTBL, Package (0x10)
            {
                0x00, 
                0x20, 
                0x20, 
                0x30, 
                0x40, 
                0x40, 
                0x60, 
                0x80, 
                0x80, 
                0x80, 
                0x80, 
                0xC0, 
                0x0100, 
                0x0100, 
                0x0100, 
                0x0200
            })
            Name (ERNG, Package (0x0D)
            {
                0x000C0000, 
                0x000C4000, 
                0x000C8000, 
                0x000CC000, 
                0x000D0000, 
                0x000D4000, 
                0x000D8000, 
                0x000DC000, 
                0x000E0000, 
                0x000E4000, 
                0x000E8000, 
                0x000EC000, 
                0x000F0000
            })
            Name (PAMB, Buffer (0x07){})
            Method (EROM, 0, NotSerialized)
            {
                CreateDWordField (P0RS, \_SB.PCI0._Y00._MIN, RMIN)  // _MIN: Minimum Base Address
                CreateDWordField (P0RS, \_SB.PCI0._Y00._MAX, RMAX)  // _MAX: Maximum Base Address
                CreateDWordField (P0RS, \_SB.PCI0._Y00._LEN, RLEN)  // _LEN: Length
                CreateByteField (PAMB, 0x06, BREG)
                PAMB = PAMS /* \_SB_.PCI0.PAMS */
                BREG = BSEG /* \_SB_.PCI0.BSEG */
                RMIN = 0x00
                RMAX = 0x00
                RLEN = 0x00
                Local0 = 0x00
                While ((Local0 < 0x0D))
                {
                    Local1 = (Local0 >> 0x01)
                    Local2 = DerefOf (PAMB [Local1])
                    If ((Local0 & 0x01))
                    {
                        Local2 >>= 0x04
                    }

                    Local2 &= 0x03
                    If (RMIN)
                    {
                        If (Local2)
                        {
                            RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                            If ((RMAX == 0x000F3FFF))
                            {
                                RMAX = 0x000FFFFF
                            }

                            RLEN = (RMAX - RMIN) /* \_SB_.PCI0.EROM.RMIN */
                            RLEN++
                        }
                        Else
                        {
                            Local0 = 0x0C
                        }
                    }
                    ElseIf (Local2)
                    {
                        RMIN = DerefOf (ERNG [Local0])
                        RMAX = (DerefOf (ERNG [Local0]) + 0x3FFF)
                        If ((RMAX == 0x000F3FFF))
                        {
                            RMAX = 0x000FFFFF
                        }

                        RLEN = (RMAX - RMIN) /* \_SB_.PCI0.EROM.RMIN */
                        RLEN++
                    }
                    Else
                    {
                    }

                    Local0++
                }
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P0RS) /* \_SB_.PCI0.P0RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x00, 0x0100)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x0E), 
                    STM0,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "00-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x00, 0x0100)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    Offset (0x1E), 
                    STM1,   7
                }
            }

            Scope (\_SB.PCI0)
            {
                Name (SLI1, Buffer (0x9E)
                {
                    "791369584825Genuine NVIDIA Certified SLI Ready Motherboard for INTEL CRB           ef7c-Copyright 2014 NVIDIA Corporation All Rights Reserved-394180768352(R)"
                })
                Name (SLI0, Buffer (0x5B)
                {
                    " No SLI key has been loaded because this board does not support SLI.  Intel Coporation (R)"
                })
            }

            Device (WMI1)
            {
                Name (_HID, "PNP0C14" /* Windows Management Instrumentation Device */)  // _HID: Hardware ID
                Name (_UID, "MXM2")  // _UID: Unique ID
                Name (_WDG, Buffer (0x14)
                {
                    /* 0000 */  0x3C, 0x5C, 0xCB, 0xF6, 0xAE, 0x9C, 0xBD, 0x4E,  // <\.....N
                    /* 0008 */  0xB5, 0x77, 0x93, 0x1E, 0xA3, 0x2A, 0x2C, 0xC0,  // .w...*,.
                    /* 0010 */  0x4D, 0x58, 0x01, 0x02                           // MX..
                })
                Method (WMMX, 3, NotSerialized)
                {
                    CreateDWordField (Arg2, 0x00, FUNC)
                    If ((FUNC == 0x41494C53))
                    {
                        Return (SLI1) /* \_SB_.PCI0.SLI1 */
                    }

                    Return (0x00)
                }
            }

            Device (LPC0)
            {
                Name (_ADR, 0x001F0000)  // _ADR: Address
                OperationRegion (LPCB, PCI_Config, 0x00, 0x0100)
                Field (LPCB, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x4C), 
                    GLE0,   1, 
                    Offset (0xAC), 
                    Offset (0xAE), 
                    XSMB,   1
                }

                Device (DMAC)
                {
                    Name (_HID, EisaId ("PNP0200") /* PC-class DMA Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0081,             // Range Minimum
                            0x0081,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0087,             // Range Minimum
                            0x0087,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0089,             // Range Minimum
                            0x0089,             // Range Maximum
                            0x00,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x008F,             // Range Minimum
                            0x008F,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x00C0,             // Range Minimum
                            0x00C0,             // Range Maximum
                            0x00,               // Alignment
                            0x20,               // Length
                            )
                        DMA (Compatibility, NotBusMaster, Transfer8, )
                            {4}
                    })
                }

                Device (RTC)
                {
                    Name (_HID, EisaId ("PNP0B00") /* AT Real-Time Clock */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0070,             // Range Minimum
                            0x0070,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0074,             // Range Minimum
                            0x0074,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {8}
                    })
                }

                Device (PIC)
                {
                    Name (_HID, EisaId ("PNP0000") /* 8259-compatible Programmable Interrupt Controller */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0020,             // Range Minimum
                            0x0020,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x00A0,             // Range Minimum
                            0x00A0,             // Range Maximum
                            0x01,               // Alignment
                            0x1E,               // Length
                            )
                        IO (Decode16,
                            0x04D0,             // Range Minimum
                            0x04D0,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                    })
                }

                Device (FPU)
                {
                    Name (_HID, EisaId ("PNP0C04") /* x87-compatible Floating Point Processing Unit */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x00F0,             // Range Minimum
                            0x00F0,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {13}
                    })
                }

                Device (TMR)
                {
                    Name (_HID, EisaId ("PNP0100") /* PC-class System Timer */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0040,             // Range Minimum
                            0x0040,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0050,             // Range Minimum
                            0x0050,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IRQNoFlags ()
                            {0}
                    })
                }

                Device (SPKR)
                {
                    Name (_HID, EisaId ("PNP0800") /* Microsoft Sound System Compatible Device */)  // _HID: Hardware ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0061,             // Range Minimum
                            0x0061,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                    })
                }

                Device (HPET)
                {
                    Name (_HID, EisaId ("PNP0103") /* HPET System Timer */)  // _HID: Hardware ID
                    OperationRegion (HPTC, SystemMemory, 0xFED1F404, 0x04)
                    Field (HPTC, DWordAcc, NoLock, Preserve)
                    {
                        HPTS,   2, 
                            ,   5, 
                        HPTE,   1, 
                        Offset (0x04)
                    }

                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If (HPTE)
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS0, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED00000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS1, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED01000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED02000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Name (CRS3, ResourceTemplate ()
                    {
                        Memory32Fixed (ReadWrite,
                            0xFED03000,         // Address Base
                            0x00000400,         // Address Length
                            )
                    })
                    Method (_CRS, 0, Serialized)  // _CRS: Current Resource Settings
                    {
                        Switch (ToInteger (HPTS))
                        {
                            Case (0x00)
                            {
                                Return (CRS0) /* \_SB_.PCI0.LPC0.HPET.CRS0 */
                            }
                            Case (0x01)
                            {
                                Return (CRS1) /* \_SB_.PCI0.LPC0.HPET.CRS1 */
                            }
                            Case (0x02)
                            {
                                Return (CRS2) /* \_SB_.PCI0.LPC0.HPET.CRS2 */
                            }
                            Case (0x03)
                            {
                                Return (CRS3) /* \_SB_.PCI0.LPC0.HPET.CRS3 */
                            }

                        }

                        Return (CRS0) /* \_SB_.PCI0.LPC0.HPET.CRS0 */
                    }
                }

                Device (XTRA)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x10)  // _UID: Unique ID
                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0500,             // Range Minimum
                            0x0500,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0400,             // Range Minimum
                            0x0400,             // Range Maximum
                            0x01,               // Alignment
                            0x80,               // Length
                            )
                        IO (Decode16,
                            0x0092,             // Range Minimum
                            0x0092,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0010,             // Range Minimum
                            0x0010,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0072,             // Range Minimum
                            0x0072,             // Range Maximum
                            0x01,               // Alignment
                            0x02,               // Length
                            )
                        IO (Decode16,
                            0x0080,             // Range Minimum
                            0x0080,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0084,             // Range Minimum
                            0x0084,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0088,             // Range Minimum
                            0x0088,             // Range Maximum
                            0x01,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x008C,             // Range Minimum
                            0x008C,             // Range Maximum
                            0x01,               // Alignment
                            0x03,               // Length
                            )
                        IO (Decode16,
                            0x0090,             // Range Minimum
                            0x0090,             // Range Maximum
                            0x01,               // Alignment
                            0x10,               // Length
                            )
                        IO (Decode16,
                            0x0580,             // Range Minimum
                            0x0580,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0600,             // Range Minimum
                            0x0600,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        IO (Decode16,
                            0x0880,             // Range Minimum
                            0x0880,             // Range Maximum
                            0x01,               // Alignment
                            0x04,               // Length
                            )
                        IO (Decode16,
                            0x0800,             // Range Minimum
                            0x0800,             // Range Maximum
                            0x01,               // Alignment
                            0x20,               // Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1C000,         // Address Base
                            0x00024000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED45000,         // Address Base
                            0x00047000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFF000000,         // Address Base
                            0x01000000,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFEE00000,         // Address Base
                            0x00100000,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12000,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadWrite,
                            0xFED12010,         // Address Base
                            0x00000010,         // Address Length
                            )
                        Memory32Fixed (ReadOnly,
                            0xFED1B000,         // Address Base
                            0x00001000,         // Address Length
                            )
                    })
                }

                OperationRegion (LPCR, PCI_Config, 0x80, 0x04)
                Field (LPCR, ByteAcc, NoLock, Preserve)
                {
                    CADR,   3, 
                        ,   1, 
                    CBDR,   3, 
                    Offset (0x01), 
                    LTDR,   2, 
                        ,   2, 
                    FDDR,   1, 
                    Offset (0x02), 
                    CALE,   1, 
                    CBLE,   1, 
                    LTLE,   1, 
                    FDLE,   1, 
                    Offset (0x03), 
                    GLLE,   1, 
                    GHLE,   1, 
                    KCLE,   1, 
                    MCLE,   1, 
                    C1LE,   1, 
                    C2LE,   1, 
                    Offset (0x04)
                }

                OperationRegion (SMIE, SystemIO, PMBA, 0x04)
                Field (SMIE, ByteAcc, NoLock, Preserve)
                {
                        ,   10, 
                    RTCS,   1, 
                        ,   3, 
                    PEXS,   1, 
                    WAKS,   1, 
                    Offset (0x03), 
                    PWBT,   1, 
                    Offset (0x04)
                }

                OperationRegion (SLPR, SystemIO, SMCR, 0x08)
                Field (SLPR, ByteAcc, NoLock, Preserve)
                {
                        ,   4, 
                    SLPE,   1, 
                        ,   31, 
                    SLPX,   1, 
                    Offset (0x08)
                }

                Method (UXDV, 1, Serialized)
                {
                    Local0 = 0xFF
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x03F8)
                        {
                            Local0 = 0x00
                        }
                        Case (0x02F8)
                        {
                            Local0 = 0x01
                        }
                        Case (0x0220)
                        {
                            Local0 = 0x02
                        }
                        Case (0x0228)
                        {
                            Local0 = 0x03
                        }
                        Case (0x0238)
                        {
                            Local0 = 0x04
                        }
                        Case (0x02E8)
                        {
                            Local0 = 0x05
                        }
                        Case (0x0338)
                        {
                            Local0 = 0x06
                        }
                        Case (0x03E8)
                        {
                            Local0 = 0x07
                        }

                    }

                    Return (Local0)
                }

                Method (RRIO, 4, Serialized)
                {
                    Switch ((Arg0 + 0x00))
                    {
                        Case (0x00)
                        {
                            CALE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CADR = Local0
                            }

                            If (Arg1)
                            {
                                CALE = 0x01
                            }
                        }
                        Case (0x01)
                        {
                            CBLE = 0x00
                            Local0 = UXDV (Arg2)
                            If ((Local0 != 0xFF))
                            {
                                CBDR = Local0
                            }

                            If (Arg1)
                            {
                                CBLE = 0x01
                            }
                        }
                        Case (0x02)
                        {
                            LTLE = 0x00
                            If ((Arg2 == 0x0378))
                            {
                                LTDR = 0x00
                            }

                            If ((Arg2 == 0x0278))
                            {
                                LTDR = 0x01
                            }

                            If ((Arg2 == 0x03BC))
                            {
                                LTDR = 0x02
                            }

                            If (Arg1)
                            {
                                LTLE = 0x01
                            }
                        }
                        Case (0x03)
                        {
                            FDLE = 0x00
                            If ((Arg2 == 0x03F0))
                            {
                                FDDR = 0x00
                            }

                            If ((Arg2 == 0x0370))
                            {
                                FDDR = 0x01
                            }

                            If (Arg1)
                            {
                                FDLE = 0x01
                            }
                        }
                        Case (0x08)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x09)
                        {
                            If ((Arg2 == 0x0200))
                            {
                                If (Arg1)
                                {
                                    GLLE = 0x01
                                }
                                Else
                                {
                                    GLLE = 0x00
                                }
                            }

                            If ((Arg2 == 0x0208))
                            {
                                If (Arg1)
                                {
                                    GHLE = 0x01
                                }
                                Else
                                {
                                    GHLE = 0x00
                                }
                            }
                        }
                        Case (0x0A)
                        {
                            If (((Arg2 == 0x60) || (Arg2 == 0x64)))
                            {
                                If (Arg1)
                                {
                                    KCLE = 0x01
                                }
                                Else
                                {
                                    KCLE = 0x00
                                }
                            }
                        }
                        Case (0x0B)
                        {
                            If (((Arg2 == 0x62) || (Arg2 == 0x66)))
                            {
                                If (Arg1)
                                {
                                    MCLE = 0x01
                                }
                                Else
                                {
                                    MCLE = 0x00
                                }
                            }
                        }
                        Case (0x0C)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }
                        Case (0x0D)
                        {
                            If ((Arg2 == 0x2E))
                            {
                                If (Arg1)
                                {
                                    C1LE = 0x01
                                }
                                Else
                                {
                                    C1LE = 0x00
                                }
                            }

                            If ((Arg2 == 0x4E))
                            {
                                If (Arg1)
                                {
                                    C2LE = 0x01
                                }
                                Else
                                {
                                    C2LE = 0x00
                                }
                            }
                        }

                    }
                }

                Method (RDMA, 3, NotSerialized)
                {
                }

                Method (SPTS, 1, NotSerialized)
                {
                    SLPX = One
                    SLPE = One
                }

                Method (SWAK, 1, NotSerialized)
                {
                    SLPE = Zero
                    If (RTCS){}
                    Else
                    {
                        Notify (PWRB, 0x02) // Device Wake
                    }
                }

                Device (SIO1)
                {
                    Name (_HID, EisaId ("PNP0C02") /* PNP Motherboard Resources */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (CRS, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y01)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y02)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y03)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y04)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x00,               // Alignment
                            0x00,               // Length
                            _Y05)
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If (((SP1O < 0x03F0) && (SP1O > 0xF0)))
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._MIN, GPI0)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._MAX, GPI1)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y01._LEN, GPIL)  // _LEN: Length
                            GPI0 = SP1O /* \SP1O */
                            GPI1 = SP1O /* \SP1O */
                            GPIL = 0x02
                        }

                        If (IO1B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y02._MIN, GP10)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y02._MAX, GP11)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y02._LEN, GPL1)  // _LEN: Length
                            GP10 = IO1B /* \IO1B */
                            GP11 = IO1B /* \IO1B */
                            GPL1 = IO1L /* \IO1L */
                        }

                        If (IO2B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y03._MIN, GP20)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y03._MAX, GP21)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y03._LEN, GPL2)  // _LEN: Length
                            GP20 = IO2B /* \IO2B */
                            GP21 = IO2B /* \IO2B */
                            GPL2 = IO2L /* \IO2L */
                        }

                        If (IO3B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y04._MIN, GP30)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y04._MAX, GP31)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y04._LEN, GPL3)  // _LEN: Length
                            GP30 = IO3B /* \IO3B */
                            GP31 = IO3B /* \IO3B */
                            GPL3 = IO3L /* \IO3L */
                        }

                        If (IO4B)
                        {
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y05._MIN, GP40)  // _MIN: Minimum Base Address
                            CreateWordField (CRS, \_SB.PCI0.LPC0.SIO1._Y05._MAX, GP41)  // _MAX: Maximum Base Address
                            CreateByteField (CRS, \_SB.PCI0.LPC0.SIO1._Y05._LEN, GPL4)  // _LEN: Length
                            GP40 = IO4B /* \IO4B */
                            GP41 = IO4B /* \IO4B */
                            GPL4 = IO4L /* \IO4L */
                        }

                        Return (CRS) /* \_SB_.PCI0.LPC0.SIO1.CRS_ */
                    }

                    Name (DCAT, Package (0x15)
                    {
                        0x02, 
                        0x03, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0x05, 
                        0xFF, 
                        0x06, 
                        0xFF, 
                        0xFF, 
                        0xFF, 
                        0xFF
                    })
                    Mutex (MUT0, 0x00)
                    Method (ENFG, 1, NotSerialized)
                    {
                        Acquire (MUT0, 0x0FFF)
                        INDX = ENTK /* \ENTK */
                        INDX = ENTK /* \ENTK */
                        LDN = Arg0
                    }

                    Method (EXFG, 0, NotSerialized)
                    {
                        INDX = EXTK /* \EXTK */
                        Release (MUT0)
                    }

                    Method (UHID, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = (OPT0 & 0x70)
                        EXFG ()
                        If (Local0)
                        {
                            Return (0x1005D041)
                        }
                        Else
                        {
                            Return (0x0105D041)
                        }
                    }

                    OperationRegion (IOID, SystemIO, SP1O, 0x02)
                    Field (IOID, ByteAcc, NoLock, Preserve)
                    {
                        INDX,   8, 
                        DATA,   8
                    }

                    IndexField (INDX, DATA, ByteAcc, NoLock, Preserve)
                    {
                        Offset (0x07), 
                        LDN,    8, 
                        Offset (0x21), 
                        SCF1,   8, 
                        SCF2,   8, 
                        SCF3,   8, 
                        SCF4,   8, 
                        SCF5,   8, 
                        SCF6,   8, 
                        Offset (0x29), 
                        CKCF,   8, 
                        Offset (0x30), 
                        ACTR,   8, 
                        Offset (0x60), 
                        IOAH,   8, 
                        IOAL,   8, 
                        IOH2,   8, 
                        IOL2,   8, 
                        Offset (0x70), 
                        INTR,   4, 
                        INTT,   4, 
                        Offset (0x74), 
                        DMCH,   8, 
                        Offset (0xE0), 
                        RGE0,   8, 
                        RGE1,   8, 
                        RGE2,   8, 
                        RGE3,   8, 
                        RGE4,   8, 
                        RGE5,   8, 
                        RGE6,   8, 
                        RGE7,   8, 
                        RGE8,   8, 
                        RGE9,   8, 
                        Offset (0xF0), 
                        OPT0,   8, 
                        OPT1,   8, 
                        OPT2,   8, 
                        OPT3,   8, 
                        OPT4,   8, 
                        OPT5,   8, 
                        OPT6,   8, 
                        OPT7,   8, 
                        OPT8,   8, 
                        OPT9,   8
                    }

                    OperationRegion (RNTR, SystemIO, IO2B, IO2L)
                    Field (RNTR, ByteAcc, NoLock, Preserve)
                    {
                        PMES,   8, 
                        Offset (0x04), 
                        PMEE,   1, 
                        Offset (0x05), 
                        Offset (0x08), 
                        PMS3,   8, 
                        PMS2,   8, 
                        PMS1,   8, 
                        Offset (0x0C), 
                        PME3,   8, 
                        PME2,   8, 
                        PME1,   8
                    }

                    Method (CGLD, 1, NotSerialized)
                    {
                        Return (DerefOf (DCAT [Arg0]))
                    }

                    Method (DSTA, 1, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        Local0 = ACTR /* \_SB_.PCI0.LPC0.SIO1.ACTR */
                        Local1 = ((IOAH << 0x08) | IOAL) /* \_SB_.PCI0.LPC0.SIO1.IOAL */
                        EXFG ()
                        If ((Local0 == 0xFF))
                        {
                            Return (0x00)
                        }

                        Local0 &= 0x01
                        If ((Arg0 < 0x10))
                        {
                            IOST |= (Local0 << Arg0)
                        }

                        If (Local0)
                        {
                            Return (0x0F)
                        }
                        ElseIf ((Arg0 < 0x10))
                        {
                            If (((0x01 << Arg0) & IOST))
                            {
                                Return (0x0D)
                            }
                            Else
                            {
                                Return (0x00)
                            }
                        }
                        Else
                        {
                            If (Local1)
                            {
                                Return (0x0D)
                            }

                            Return (0x00)
                        }
                    }

                    Method (DCNT, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        If (((DMCH < 0x04) && ((Local1 = (DMCH & 0x03)) != 0x00)))
                        {
                            RDMA (Arg0, Arg1, Local1++)
                        }

                        ACTR = Arg1
                        Local1 = (IOAH << 0x08)
                        Local1 |= IOAL
                        RRIO (Arg0, Arg1, Local1, 0x08)
                        EXFG ()
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y08)
                        IRQNoFlags (_Y06)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y07)
                            {}
                    })
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y06._INT, IRQM)  // _INT: Interrupts
                    CreateByteField (CRS1, \_SB.PCI0.LPC0.SIO1._Y07._DMA, DMAM)  // _DMA: Direct Memory Access
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y08._MIN, IO11)  // _MIN: Minimum Base Address
                    CreateWordField (CRS1, \_SB.PCI0.LPC0.SIO1._Y08._MAX, IO12)  // _MAX: Maximum Base Address
                    CreateByteField (CRS1, \_SB.PCI0.LPC0.SIO1._Y08._LEN, LEN1)  // _LEN: Length
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y0B)
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y0C)
                        IRQNoFlags (_Y09)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y0A)
                            {}
                    })
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y09._INT, IRQE)  // _INT: Interrupts
                    CreateByteField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0A._DMA, DMAE)  // _DMA: Direct Memory Access
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0B._MIN, IO21)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0B._MAX, IO22)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0B._LEN, LEN2)  // _LEN: Length
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0C._MIN, IO31)  // _MIN: Minimum Base Address
                    CreateWordField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0C._MAX, IO32)  // _MAX: Maximum Base Address
                    CreateByteField (CRS2, \_SB.PCI0.LPC0.SIO1._Y0C._LEN, LEN3)  // _LEN: Length
                    Name (CRS3, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0000,             // Range Minimum
                            0x0000,             // Range Maximum
                            0x01,               // Alignment
                            0x00,               // Length
                            _Y0F)
                        IRQ (Level, ActiveLow, Shared, _Y0D)
                            {}
                        DMA (Compatibility, NotBusMaster, Transfer8, _Y0E)
                            {}
                    })
                    CreateWordField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0D._INT, IRQT)  // _INT: Interrupts
                    CreateByteField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0D._HE, IRQS)  // _HE_: High-Edge
                    CreateByteField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0E._DMA, DMAT)  // _DMA: Direct Memory Access
                    CreateWordField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0F._MIN, IO41)  // _MIN: Minimum Base Address
                    CreateWordField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0F._MAX, IO42)  // _MAX: Maximum Base Address
                    CreateByteField (CRS3, \_SB.PCI0.LPC0.SIO1._Y0F._LEN, LEN4)  // _LEN: Length
                    Method (DCRS, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO11 = (IOAH << 0x08)
                        IO11 |= IOAL /* \_SB_.PCI0.LPC0.SIO1.IO11 */
                        IO12 = IO11 /* \_SB_.PCI0.LPC0.SIO1.IO11 */
                        LEN1 = 0x08
                        If (INTR)
                        {
                            IRQM = (0x01 << INTR) /* \_SB_.PCI0.LPC0.SIO1.INTR */
                        }
                        Else
                        {
                            IRQM = 0x00
                        }

                        If (((DMCH > 0x03) || (Arg1 == 0x00)))
                        {
                            DMAM = 0x00
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAM = (0x01 << Local1)
                        }

                        EXFG ()
                        Return (CRS1) /* \_SB_.PCI0.LPC0.SIO1.CRS1 */
                    }

                    Method (DCR2, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO21 = (IOAH << 0x08)
                        IO21 |= IOAL /* \_SB_.PCI0.LPC0.SIO1.IO21 */
                        IO22 = IO21 /* \_SB_.PCI0.LPC0.SIO1.IO21 */
                        LEN2 = 0x08
                        IO31 = (IOH2 << 0x08)
                        IO31 |= IOL2 /* \_SB_.PCI0.LPC0.SIO1.IO31 */
                        IO32 = IO31 /* \_SB_.PCI0.LPC0.SIO1.IO31 */
                        LEN3 = 0x08
                        If (INTR)
                        {
                            IRQE = (0x01 << INTR) /* \_SB_.PCI0.LPC0.SIO1.INTR */
                        }
                        Else
                        {
                            IRQE = 0x00
                        }

                        If (((DMCH > 0x03) || (Arg1 == 0x00)))
                        {
                            DMAE = 0x00
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAE = (0x01 << Local1)
                        }

                        EXFG ()
                        Return (CRS2) /* \_SB_.PCI0.LPC0.SIO1.CRS2 */
                    }

                    Method (DCR3, 2, NotSerialized)
                    {
                        ENFG (CGLD (Arg0))
                        IO41 = (IOAH << 0x08)
                        IO41 |= IOAL /* \_SB_.PCI0.LPC0.SIO1.IO41 */
                        IO42 = IO41 /* \_SB_.PCI0.LPC0.SIO1.IO41 */
                        LEN4 = 0x08
                        If (INTR)
                        {
                            IRQT = (0x01 << INTR) /* \_SB_.PCI0.LPC0.SIO1.INTR */
                        }
                        Else
                        {
                            IRQT = 0x00
                        }

                        If (((DMCH > 0x03) || (Arg1 == 0x00)))
                        {
                            DMAT = 0x00
                        }
                        Else
                        {
                            Local1 = (DMCH & 0x03)
                            DMAT = (0x01 << Local1)
                        }

                        EXFG ()
                        Return (CRS3) /* \_SB_.PCI0.LPC0.SIO1.CRS3 */
                    }

                    Method (DSRS, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x09, IRQM)
                        CreateByteField (Arg0, 0x0C, DMAM)
                        CreateWordField (Arg0, 0x02, IO11)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO11 & 0xFF)
                        IOAH = (IO11 >> 0x08)
                        If (IRQM)
                        {
                            FindSetRightBit (IRQM, Local0)
                            INTR = (Local0 - 0x01)
                        }
                        Else
                        {
                            INTR = 0x00
                        }

                        If (DMAM)
                        {
                            FindSetRightBit (DMAM, Local0)
                            DMCH = (Local0 - 0x01)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                        Local2 = Arg1
                        If ((Local2 > 0x00))
                        {
                            Local2 -= 0x01
                        }
                    }

                    Method (DSR2, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x11, IRQE)
                        CreateByteField (Arg0, 0x14, DMAE)
                        CreateWordField (Arg0, 0x02, IO21)
                        CreateWordField (Arg0, 0x0A, IO31)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO21 & 0xFF)
                        IOAH = (IO21 >> 0x08)
                        IOL2 = (IO31 & 0xFF)
                        IOH2 = (IO31 >> 0x08)
                        If (IRQE)
                        {
                            FindSetRightBit (IRQE, Local0)
                            INTR = (Local0 - 0x01)
                        }
                        Else
                        {
                            INTR = 0x00
                        }

                        If (DMAE)
                        {
                            FindSetRightBit (DMAE, Local0)
                            DMCH = (Local0 - 0x01)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                        Local2 = Arg1
                        If ((Local2 > 0x00))
                        {
                            Local2 -= 0x01
                        }
                    }

                    Method (DSR3, 2, NotSerialized)
                    {
                        CreateWordField (Arg0, 0x02, IO41)
                        CreateWordField (Arg0, 0x09, IRQT)
                        CreateByteField (Arg0, 0x0B, IRQS)
                        CreateByteField (Arg0, 0x0D, DMAT)
                        ENFG (CGLD (Arg1))
                        IOAL = (IO41 & 0xFF)
                        IOAH = (IO41 >> 0x08)
                        If (IRQT)
                        {
                            FindSetRightBit (IRQT, Local0)
                            INTR = (Local0 - 0x01)
                        }
                        Else
                        {
                            INTR = 0x00
                        }

                        If (DMAT)
                        {
                            FindSetRightBit (DMAT, Local0)
                            DMCH = (Local0 - 0x01)
                        }
                        Else
                        {
                            DMCH = 0x04
                        }

                        EXFG ()
                        DCNT (Arg1, 0x01)
                        Local2 = Arg1
                        If ((Local2 > 0x00))
                        {
                            Local2 -= 0x01
                        }
                    }

                    Name (PMFG, 0x00)
                    Method (SIOS, 1, NotSerialized)
                    {
                        Debug = "SIOS"
                        If ((0x05 != Arg0))
                        {
                            ENFG (0x0A)
                            OPT3 = 0xFF
                            OPT4 = 0xFF
                            If (KBFG)
                            {
                                OPT6 |= 0x10
                            }
                            Else
                            {
                                OPT6 &= 0xEF
                            }

                            If (MSFG)
                            {
                                OPT6 |= 0x20
                            }
                            Else
                            {
                                OPT6 &= 0xDF
                            }

                            OPT2 |= 0x01 /* \_SB_.PCI0.LPC0.SIO1.OPT2 */
                            EXFG ()
                        }
                    }

                    Method (SIOW, 1, NotSerialized)
                    {
                        Debug = "SIOW"
                        ENFG (0x0A)
                        PMFG = OPT3 /* \_SB_.PCI0.LPC0.SIO1.OPT3 */
                        OPT3 = 0xFF
                        OPT6 &= 0xCF
                        OPT2 &= 0xFE /* \_SB_.PCI0.LPC0.SIO1.OPT2 */
                        EXFG ()
                    }

                    Method (SIOH, 0, NotSerialized)
                    {
                        If ((PMFG & 0x10)){}
                        If ((PMFG & 0x20)){}
                    }
                }

                Device (PS2K)
                {
                    Name (_HID, EisaId ("PNP0303") /* IBM Enhanced Keyboard (101/102-key, PS/2 Mouse) */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP030B"))  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (_CRS, ResourceTemplate ()  // _CRS: Current Resource Settings
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {1}
                    })
                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x0060,             // Range Minimum
                                0x0060,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IO (Decode16,
                                0x0064,             // Range Minimum
                                0x0064,             // Range Maximum
                                0x00,               // Alignment
                                0x01,               // Length
                                )
                            IRQNoFlags ()
                                {1}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        KBFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (KBFG, 0x01)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (PS2M)
                {
                    Name (_HID, EisaId ("PNP0F03") /* Microsoft PS/2-style Mouse */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x05)
                    Name (_CID, EisaId ("PNP0F13") /* PS/2 Mouse */)  // _CID: Compatible ID
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        If ((IOST & 0x4000))
                        {
                            Return (0x0F)
                        }
                        Else
                        {
                            Return (0x00)
                        }
                    }

                    Name (CRS1, ResourceTemplate ()
                    {
                        IRQNoFlags ()
                            {12}
                    })
                    Name (CRS2, ResourceTemplate ()
                    {
                        IO (Decode16,
                            0x0060,             // Range Minimum
                            0x0060,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IO (Decode16,
                            0x0064,             // Range Minimum
                            0x0064,             // Range Maximum
                            0x00,               // Alignment
                            0x01,               // Length
                            )
                        IRQNoFlags ()
                            {12}
                    })
                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        If ((IOST & 0x0400))
                        {
                            Return (CRS1) /* \_SB_.PCI0.LPC0.PS2M.CRS1 */
                        }
                        Else
                        {
                            Return (CRS2) /* \_SB_.PCI0.LPC0.PS2M.CRS2 */
                        }
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IRQNoFlags ()
                                {12}
                        }
                        EndDependentFn ()
                    })
                    Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                    {
                        MSFG = Arg0
                    }

                    Scope (\)
                    {
                        Name (MSFG, 0x01)
                    }

                    Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                    {
                        Return (GPRW (0x1D, 0x03))
                    }
                }

                Device (UAR1)
                {
                    Name (_HID, EisaId ("PNP0501") /* 16550A-compatible COM Serial Port */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x02)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (^^SIO1.DSTA (0x00))
                    }

                    Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
                    {
                        ^^SIO1.DCNT (0x00, 0x00)
                    }

                    Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
                    {
                        Return (^^SIO1.DCRS (0x00, 0x00))
                    }

                    Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
                    {
                        ^^SIO1.DSRS (Arg0, 0x00)
                    }

                    Name (_PRS, ResourceTemplate ()  // _PRS: Possible Resource Settings
                    {
                        StartDependentFn (0x00, 0x00)
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {4}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03F8,             // Range Minimum
                                0x03F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02F8,             // Range Minimum
                                0x02F8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x03E8,             // Range Minimum
                                0x03E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        StartDependentFnNoPri ()
                        {
                            IO (Decode16,
                                0x02E8,             // Range Minimum
                                0x02E8,             // Range Maximum
                                0x01,               // Alignment
                                0x08,               // Length
                                )
                            IRQNoFlags ()
                                {3,4,5,7,9,10,11,12}
                            DMA (Compatibility, NotBusMaster, Transfer8, )
                                {}
                        }
                        EndDependentFn ()
                    })
                }

                Device (HHMD)
                {
                    Name (_HID, EisaId ("PNP0C08") /* ACPI Core Hardware */)  // _HID: Hardware ID
                    Name (_UID, 0x00)  // _UID: Unique ID
                    Name (LDN, 0x0B)
                    Method (_STA, 0, NotSerialized)  // _STA: Status
                    {
                        Return (0x00)
                    }
                }
            }

            Device (IP2P)
            {
                Name (_ADR, 0x001E0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0B, 0x03))
                }
            }

            Device (SAT1)
            {
                Name (_ADR, 0x001F0002)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT1.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT1.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT1.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT1.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.SAT1.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.SAT1.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT1.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.SAT1.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.SAT1.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT1.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.SAT1.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.SAT1.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.SAT1.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.SAT1.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.SAT1.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.SAT1.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT1.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.SAT1.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.SAT1.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.SAT1.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.SAT1.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT1.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT1.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT1.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT1.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT1.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT1.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT1.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT1.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT1.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT1.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT1.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.SAT1.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.SAT1.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT1.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.SAT1.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.SAT1.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.SAT1.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT1.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.SAT1.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.SAT1.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.SAT1.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.SAT1.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.SAT1.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.SAT1.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT1.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.SAT1.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.SAT1.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.SAT1.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.SAT1.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT1.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT1.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT1.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT1.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT1.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT1.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT1.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT1.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT1.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (SAT2)
            {
                Name (_ADR, 0x001F0005)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT2.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.SAT2.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT2.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT2.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.SAT2.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.SAT2.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT2.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.SAT2.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.SAT2.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT2.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.SAT2.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.SAT2.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.SAT2.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.SAT2.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.SAT2.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.SAT2.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT2.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.SAT2.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.SAT2.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.SAT2.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.SAT2.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT2.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT2.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT2.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT2.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT2.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT2.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT2.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT2.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT2.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.SAT2.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.SAT2.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.SAT2.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.SAT2.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.SAT2.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.SAT2.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.SAT2.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.SAT2.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.SAT2.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.SAT2.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.SAT2.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.SAT2.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.SAT2.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.SAT2.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.SAT2.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.SAT2.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.SAT2.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.SAT2.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.SAT2.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.SAT2.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.SAT2.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.SAT2.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.SAT2.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.SAT2.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.SAT2.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.SAT2.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.SAT2.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.SAT2.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.SAT2.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (SMBS)
            {
                Name (_ADR, 0x001F0003)  // _ADR: Address
            }

            Device (TERM)
            {
                Name (_ADR, 0x001F0006)  // _ADR: Address
            }

            Device (XHCI)
            {
                Name (_ADR, 0x00140000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                Name (XRST, 0x00)
                Name (XUSB, 0x00)
                OperationRegion (XPRT, PCI_Config, 0x74, 0x6C)
                Field (XPRT, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x5C), 
                    PR2,    32, 
                    PR2M,   32, 
                    PR3,    32, 
                    PR3M,   32
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PMEE = 0x01
                    }
                    Else
                    {
                        PMEE = 0x00
                    }
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = 0x01
                        }
                        Else
                        {
                            OPAC = 0x00
                        }
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == 0x01))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (POSC, 3, NotSerialized)
                {
                    IO80 = 0x81
                    CreateDWordField (Arg2, 0x00, CDW1)
                    CreateDWordField (Arg2, 0x04, CDW2)
                    CreateDWordField (Arg2, 0x08, CDW3)
                    If (((OSYS >= 0x09) && (OSYS <= 0x0C)))
                    {
                        If ((Arg0 < 0x02))
                        {
                            CDW1 |= 0x08
                            IO80 = 0x82
                        }
                    }
                    ElseIf ((Arg0 != 0x01))
                    {
                        CDW1 |= 0x08
                        IO80 = 0x82
                    }

                    If ((XHMD == 0x00))
                    {
                        CDW1 |= 0x02
                        IO80 = 0x83
                    }

                    If (((CDW1 & 0x0E) == 0x00))
                    {
                        If (!(CDW1 & 0x01))
                        {
                            If ((CDW3 & 0x01))
                            {
                                ESEL ()
                                IO80 = 0x85
                                XHMD = 0x00
                            }

                            If ((CDW2 & 0x01))
                            {
                                XSEL (0x00)
                                IO80 = 0x84
                            }
                            Else
                            {
                                ESEL ()
                                IO80 = 0x85
                            }
                        }
                    }

                    Return (Arg2)
                }

                Method (XSEL, 1, Serialized)
                {
                    If ((((XHMD == 0x02) || (XHMD == 0x03)) || Arg0))
                    {
                        If ((XHMD == 0x03))
                        {
                            ^^LPC0.XSMB = 0x01
                        }

                        XUSB = 0x01
                        XRST = 0x01
                        Local0 = 0x00
                        Local0 = (PR3 & 0xFFFFFFC0)
                        PR3 = (Local0 | PR3M) /* \_SB_.PCI0.XHCI.PR3M */
                        Local0 = 0x00
                        Local0 = (PR2 & 0xFFFF8000)
                        PR2 = (Local0 | PR2M) /* \_SB_.PCI0.XHCI.PR2M */
                    }
                }

                Method (ESEL, 0, Serialized)
                {
                    If (((XHMD == 0x02) || (XHMD == 0x03)))
                    {
                        PR3 &= 0xFFFFFFC0
                        PR2 &= 0xFFFF8000
                        XUSB = 0x00
                        XRST = 0x00
                    }
                }

                Method (XWAK, 0, Serialized)
                {
                    If (((XUSB == 0x01) || (XRST == 0x01)))
                    {
                        XSEL (0x01)
                        Notify (XHCI, 0x00) // Bus Check
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (RHUB)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Device (HS01)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                If ((PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0x00
                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x00) || (PLAT == 0x01)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x11) || (PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0F) || (PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x03) || (PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS01._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x80, 0x00, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x0C
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS01._PLD.PLDP */
                        }
                    }

                    Device (HS02)
                    {
                        Name (_ADR, 0x02)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D)){}
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x00) || (PLAT == 0x01)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x11) || (PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0F) || (PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x03) || (PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS02._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x01, 0x01, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x0C
                            }

                            If ((PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x28
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS02._PLD.PLDP */
                        }
                    }

                    Device (HS03)
                    {
                        Name (_ADR, 0x03)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x00) || (PLAT == 0x01)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x11) || (PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0F) || (PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS03._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x81, 0x01, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x2E
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS03._PLD.PLDP */
                        }
                    }

                    Device (HS04)
                    {
                        Name (_ADR, 0x04)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If ((PLAT == 0x01))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x11) || (PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0F) || (PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x03) || (PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS04._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x02, 0x02, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                PANL = 0x03
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS04._PLD.PLDP */
                        }
                    }

                    Device (HS05)
                    {
                        Name (_ADR, 0x05)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                If ((PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0x00
                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x11) || (PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0F) || (PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x03) || (PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x01)
                                {
                                    If (((PLAT == 0x07) || (PLAT == 0x08)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS05._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x82, 0x02, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x09) || (PLAT == 0x13)))
                            {
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (0x01)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }
                            ElseIf (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS05._PLD.PLDP */
                        }
                    }

                    Device (HS06)
                    {
                        Name (_ADR, 0x06)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x0A)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x11) || (PLAT == 0x12)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0F) || (PLAT == 0x10)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS06._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x03, 0x03, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (0x01)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x08
                                }
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS06._PLD.PLDP */
                        }
                    }

                    Device (HS07)
                    {
                        Name (_ADR, 0x07)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x00)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x01)
                                {
                                    If (((PLAT == 0x00) || (PLAT == 0x01)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }

                                If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS07._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x83, 0x03, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x15
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (0x01)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x08
                                }
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS07._PLD.PLDP */
                        }
                    }

                    Device (HS08)
                    {
                        Name (_ADR, 0x08)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS08._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x04, 0x04, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                PANL = 0x08
                            }

                            If ((PLAT == 0x05))
                            {
                                PANL = 0x08
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                PANL = 0x08
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS08._PLD.PLDP */
                        }
                    }

                    Device (HS09)
                    {
                        Name (_ADR, 0x09)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0A)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x03) || (PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x00)
                                {
                                    If (((PLAT == 0x07) || (PLAT == 0x08)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS09._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x84, 0x04, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x06
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (0x01)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x05
                                }
                            }
                            ElseIf (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS09._PLD.PLDP */
                        }
                    }

                    Device (HS10)
                    {
                        Name (_ADR, 0x0A)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0A)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x0B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS10._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x05, 0x05, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x07
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (0x00)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x08
                                }
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS10._PLD.PLDP */
                        }
                    }

                    Device (HS11)
                    {
                        Name (_ADR, 0x0B)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x01)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x00)
                                {
                                    If (((PLAT == 0x00) || (PLAT == 0x01)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS11._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x85, 0x05, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (0x00)
                            {
                                If (((PLAT == 0x00) || (PLAT == 0x01)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (0x00)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x08
                                }
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                PANL = 0x08
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS11._PLD.PLDP */
                        }
                    }

                    Device (HS12)
                    {
                        Name (_ADR, 0x0C)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x01)
                                {
                                    If (((PLAT == 0x00) || (PLAT == 0x01)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }

                                If (0x01)
                                {
                                    If (((PLAT == 0x07) || (PLAT == 0x08)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS12._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x06, 0x06, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x4C
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                PANL = 0x08
                            }

                            If ((PLAT == 0x05))
                            {
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (0x01)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }
                            ElseIf (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS12._PLD.PLDP */
                        }
                    }

                    Device (HS13)
                    {
                        Name (_ADR, 0x0D)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS13._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0xC1, 0x86, 0x06, 0x01, 0x00, 0x00, 0x00,  // @.......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                PANL = 0x08
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                PANL = 0x08
                            }

                            If ((PLAT == 0x05))
                            {
                                PANL = 0x08
                            }

                            If (0x00)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    PANL = 0x08
                                }
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS13._PLD.PLDP */
                        }
                    }

                    Device (HS14)
                    {
                        Name (_ADR, 0x0E)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x01)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x11)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x12)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }
                                    Case (0x08)
                                    {
                                        If (0x01)
                                        {
                                            UPCP [0x00] = 0x00
                                        }
                                    }

                                }
                            }
                            Else
                            {
                                UPCP [0x00] = 0x00
                                If (((PLAT == 0x13) || (PLAT == 0x16)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x14) || (PLAT == 0x15)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x00)
                                {
                                    If (((PLAT == 0x00) || (PLAT == 0x01)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }

                                If (((PLAT == 0x03) || (PLAT == 0x04)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If ((PLAT == 0x05))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                                {
                                    UPCP [0x00] = 0xFF
                                }

                                If (0x00)
                                {
                                    If (((PLAT == 0x07) || (PLAT == 0x08)))
                                    {
                                        UPCP [0x00] = 0xFF
                                    }
                                }

                                If ((PLAT == 0x1B))
                                {
                                    UPCP [0x00] = 0xFF
                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.HS14._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x07, 0x07, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (0x00)
                            {
                                If (((PLAT == 0x00) || (PLAT == 0x01)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x08
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                            }

                            If (0x00)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                }
                            }

                            If ((PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x20
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.HS14._PLD.PLDP */
                        }
                    }

                    Device (SSP1)
                    {
                        Name (_ADR, 0x10)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x00)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP1._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (0x01)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                    GTOK = 0x0C
                                    GPOS = 0x0C
                                }
                            }
                            ElseIf (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP1._PLD.PLDP */
                        }
                    }

                    Device (SSP2)
                    {
                        Name (_ADR, 0x11)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Switch (ToInteger (PLAT))
                            {
                                Case (0x1B)
                                {
                                    UPCP [0x00] = 0x00
                                }

                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP2._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x15
                                GTOK = 0x07
                                GPOS = 0x07
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (0x01)
                            {
                                If (((PLAT == 0x07) || (PLAT == 0x08)))
                                {
                                    VISB = One
                                    PANL = 0x04
                                    GTOK = 0x05
                                    GPOS = 0x05
                                }
                            }
                            ElseIf (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP2._PLD.PLDP */
                        }
                    }

                    Device (SSP3)
                    {
                        Name (_ADR, 0x12)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x07)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x08)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP3._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x0C
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If ((PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x0D
                                GPOS = 0x0D
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If ((PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x28
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP3._PLD.PLDP */
                        }
                    }

                    Device (SSP4)
                    {
                        Name (_ADR, 0x13)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x03)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x04)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x05)
                                    {
                                        UPCP [0x00] = 0x00
                                    }
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP4._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x2E
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x04
                                GPOS = 0x04
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x03
                                GPOS = 0x03
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP4._PLD.PLDP */
                        }
                    }

                    Device (SSP5)
                    {
                        Name (_ADR, 0x14)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            If ((OSYS >= 0x0D))
                            {
                                Switch (ToInteger (PLAT))
                                {
                                    Case (0x1B)
                                    {
                                        UPCP [0x00] = 0x00
                                    }

                                }
                            }

                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP5._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If (((PLAT == 0x00) || (PLAT == 0x01)))
                            {
                                VISB = One
                                PANL = 0x4C
                                GTOK = 0x0C
                                GPOS = 0x0C
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x06
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x20
                                GTOK = 0x09
                                GPOS = 0x09
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x07
                                GPOS = 0x07
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x05
                                GPOS = 0x05
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP5._PLD.PLDP */
                        }
                    }

                    Device (SSP6)
                    {
                        Name (_ADR, 0x15)  // _ADR: Address
                        Method (_STA, 0, NotSerialized)  // _STA: Status
                        {
                            Return (0x0F)
                        }

                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCP, Package (0x04)
                            {
                                0xFF, 
                                0x03, 
                                0x00, 
                                0x00
                            })
                            Return (UPCP) /* \_SB_.PCI0.XHCI.RHUB.SSP6._UPC.UPCP */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x14)
                                {
                                    /* 0000 */  0x82, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x40, 0x41, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00,  // @A......
                                    /* 0010 */  0xFF, 0xFF, 0xFF, 0xFF                           // ....
                                }
                            })
                            CreateField (DerefOf (PLDP [0x00]), 0x43, 0x07, PANL)
                            CreateField (DerefOf (PLDP [0x00]), 0x4F, 0x08, GTOK)
                            CreateField (DerefOf (PLDP [0x00]), 0x57, 0x08, GPOS)
                            CreateBitField (DerefOf (PLDP [0x00]), 0x40, VISB)
                            If ((PLAT == 0x01))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If ((PLAT == 0x00))
                            {
                                VISB = One
                                PANL = 0x0C
                                GTOK = 0x01
                                GPOS = 0x01
                            }

                            If (((PLAT == 0x03) || (PLAT == 0x04)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If ((PLAT == 0x05))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If (((PLAT == 0x13) || (PLAT == 0x16)))
                            {
                                VISB = One
                                PANL = 0x07
                                GTOK = 0x0A
                                GPOS = 0x0A
                            }

                            If (((PLAT == 0x14) || (PLAT == 0x15)))
                            {
                                VISB = One
                                PANL = 0x20
                                GTOK = 0x0A
                                GPOS = 0x0A
                            }

                            If (((PLAT == 0x11) || (PLAT == 0x12)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x06
                                GPOS = 0x06
                            }

                            If (((PLAT == 0x0A) || (PLAT == 0x0B)))
                            {
                                VISB = One
                                PANL = 0x04
                                GTOK = 0x08
                                GPOS = 0x08
                            }

                            If (((PLAT == 0x0F) || (PLAT == 0x10)))
                            {
                                VISB = One
                                PANL = 0x03
                                GTOK = 0x06
                                GPOS = 0x06
                            }

                            If (((PLAT == 0x07) || (PLAT == 0x08)))
                            {
                                VISB = One
                                PANL = 0x05
                                GTOK = 0x02
                                GPOS = 0x02
                            }

                            If ((PLAT == 0x1B))
                            {
                                VISB = One
                                PANL = 0x28
                                GTOK = 0x0E
                                GPOS = 0x0E
                            }

                            Return (PLDP) /* \_SB_.PCI0.XHCI.RHUB.SSP6._PLD.PLDP */
                        }
                    }
                }
            }

            Device (EHC1)
            {
                Name (_ADR, 0x001D0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = One
                        }
                        Else
                        {
                            OPAC = One
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == One))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA) /* \_SB_.PCI0.EHC1.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR12._PLD.PLDP */
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR13._PLD.PLDP */
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR14.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR15.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR16.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR17)
                        {
                            Name (_ADR, 0x07)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR17.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR18)
                        {
                            Name (_ADR, 0x08)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC1.HUBN.PR01.PR18._PLD.PLDP */
                            }
                        }
                    }
                }
            }

            Device (EHC2)
            {
                Name (_ADR, 0x001A0000)  // _ADR: Address
                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x0D, 0x04))
                }

                Name (OPAC, 0x00)
                OperationRegion (PWKE, PCI_Config, 0x54, 0x18)
                Field (PWKE, DWordAcc, NoLock, Preserve)
                {
                    Offset (0x01), 
                    PMEE,   1, 
                        ,   6, 
                    PMES,   1, 
                    Offset (0x0E), 
                        ,   1, 
                    PWUC,   10
                }

                Method (_REG, 2, NotSerialized)  // _REG: Region Availability
                {
                    If ((Arg0 == 0x02))
                    {
                        If ((Arg1 == 0x01))
                        {
                            OPAC = One
                        }
                        Else
                        {
                            OPAC = One
                        }
                    }
                }

                Method (_PSW, 1, NotSerialized)  // _PSW: Power State Wake
                {
                    If (Arg0)
                    {
                        PWUC = Ones
                    }
                    Else
                    {
                        PWUC = 0x00
                    }
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    If ((OPAC == One))
                    {
                        PMES = 0x01
                        PMEE = 0x00
                    }
                }

                Method (_S3D, 0, NotSerialized)  // _S3D: S3 Device State
                {
                    Return (0x02)
                }

                Method (_S4D, 0, NotSerialized)  // _S4D: S4 Device State
                {
                    Return (0x02)
                }

                Device (HUBN)
                {
                    Name (_ADR, Zero)  // _ADR: Address
                    Device (PR01)
                    {
                        Name (_ADR, One)  // _ADR: Address
                        Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                        {
                            Name (UPCA, Package (0x04)
                            {
                                0xFF, 
                                0x00, 
                                0x00, 
                                0x00
                            })
                            Return (UPCA) /* \_SB_.PCI0.EHC2.HUBN.PR01._UPC.UPCA */
                        }

                        Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                        {
                            Name (PLDP, Package (0x01)
                            {
                                Buffer (0x10)
                                {
                                    /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0008 */  0x30, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // 0.......
                                }
                            })
                            Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01._PLD.PLDP */
                        }

                        Device (PR11)
                        {
                            Name (_ADR, One)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR11._PLD.PLDP */
                            }
                        }

                        Device (PR12)
                        {
                            Name (_ADR, 0x02)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12._PLD.PLDP */
                            }

                            Alias (SBV1, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR12.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR13)
                        {
                            Name (_ADR, 0x03)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1D, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13._PLD.PLDP */
                            }

                            Alias (SBV2, SDGV)
                            Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                            {
                                If ((Arg0 == ToUUID ("a5fc708f-8775-4ba6-bd0c-ba90a1ec72f8") /* Unknown UUID */))
                                {
                                    Switch (ToInteger (Arg2))
                                    {
                                        Case (0x00)
                                        {
                                            If ((Arg1 == 0x01))
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x07                                             // .
                                                })
                                            }
                                            Else
                                            {
                                                Return (Buffer (0x01)
                                                {
                                                     0x00                                             // .
                                                })
                                            }
                                        }
                                        Case (0x01)
                                        {
                                            If ((SDGV == 0xFF))
                                            {
                                                Return (0x00)
                                            }
                                            Else
                                            {
                                                Return (0x01)
                                            }
                                        }
                                        Case (0x02)
                                        {
                                            Return (SDGV) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR13.SDGV */
                                        }

                                    }
                                }

                                Return (0x00)
                            }
                        }

                        Device (PR14)
                        {
                            Name (_ADR, 0x04)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xE1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR14._PLD.PLDP */
                            }
                        }

                        Device (PR15)
                        {
                            Name (_ADR, 0x05)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR15._PLD.PLDP */
                            }
                        }

                        Device (PR16)
                        {
                            Name (_ADR, 0x06)  // _ADR: Address
                            Method (_UPC, 0, Serialized)  // _UPC: USB Port Capabilities
                            {
                                Name (UPCP, Package (0x04)
                                {
                                    0xFF, 
                                    0xFF, 
                                    0x00, 
                                    0x00
                                })
                                Return (UPCP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._UPC.UPCP */
                            }

                            Method (_PLD, 0, Serialized)  // _PLD: Physical Location of Device
                            {
                                Name (PLDP, Package (0x01)
                                {
                                    Buffer (0x10)
                                    {
                                        /* 0000 */  0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                        /* 0008 */  0xB1, 0x1E, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                    }
                                })
                                Return (PLDP) /* \_SB_.PCI0.EHC2.HUBN.PR01.PR16._PLD.PLDP */
                            }
                        }
                    }
                }
            }

            Device (ALZA)
            {
                Name (_ADR, 0x001B0000)  // _ADR: Address
            }

            Device (HECI)
            {
                Name (_ADR, 0x00160000)  // _ADR: Address
            }

            Device (HEC2)
            {
                Name (_ADR, 0x00160001)  // _ADR: Address
            }

            Device (IDER)
            {
                Name (_ADR, 0x00160002)  // _ADR: Address
            }

            Device (MEKT)
            {
                Name (_ADR, 0x00160003)  // _ADR: Address
            }

            Device (RP01)
            {
                Name (_ADR, 0x001C0000)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP02)
            {
                Name (_ADR, 0x001C0001)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP03)
            {
                Name (_ADR, 0x001C0002)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG12) /* \_SB_.AG12 */
                    }

                    Return (PG12) /* \_SB_.PG12 */
                }

                Device (D07A)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP04)
            {
                Name (_ADR, 0x001C0003)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG13) /* \_SB_.AG13 */
                    }

                    Return (PG13) /* \_SB_.PG13 */
                }

                Device (D07B)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                }
            }

            Device (RP05)
            {
                Name (_ADR, 0x001C0004)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP06)
            {
                Name (_ADR, 0x001C0005)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RP07)
            {
                Name (_ADR, 0x001C0006)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG16) /* \_SB_.AG16 */
                    }

                    Return (PG16) /* \_SB_.PG16 */
                }

                Device (D07C)
                {
                    Name (_ADR, 0xFF)  // _ADR: Address
                }
            }

            Device (RP08)
            {
                Name (_ADR, 0x001C0007)  // _ADR: Address
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (EVMR)
            {
                Name (_ADR, 0x00110000)  // _ADR: Address
            }

            Device (EVS0)
            {
                Name (_ADR, 0x00110001)  // _ADR: Address
            }

            Device (EVS1)
            {
                Name (_ADR, 0x00110002)  // _ADR: Address
            }

            Device (EVS2)
            {
                Name (_ADR, 0x00110003)  // _ADR: Address
            }

            Device (EVSS)
            {
                Name (_ADR, 0x00110004)  // _ADR: Address
                OperationRegion (IDER, PCI_Config, 0x40, 0x20)
                Field (IDER, AnyAcc, NoLock, Preserve)
                {
                    PFT0,   1, 
                    PIE0,   1, 
                    PPE0,   1, 
                    PDE0,   1, 
                    PFT1,   1, 
                    PIE1,   1, 
                    PPE1,   1, 
                    PDE1,   1, 
                    PRT0,   2, 
                        ,   2, 
                    PIP0,   2, 
                    PSIT,   1, 
                    PIDE,   1, 
                    SFT0,   1, 
                    SIE0,   1, 
                    SPE0,   1, 
                    SDE0,   1, 
                    SFT1,   1, 
                    SIE1,   1, 
                    SPE1,   1, 
                    SDE1,   1, 
                    SRT0,   2, 
                        ,   2, 
                    SIP0,   2, 
                    SSIT,   1, 
                    SIDE,   1, 
                    PRT1,   2, 
                    PIP1,   2, 
                    SRT1,   2, 
                    SIP1,   2, 
                    Offset (0x08), 
                    UDM0,   1, 
                    UDM1,   1, 
                    UDM2,   1, 
                    UDM3,   1, 
                    Offset (0x0A), 
                    PCT0,   2, 
                        ,   2, 
                    PCT1,   2, 
                    Offset (0x0B), 
                    SCT0,   2, 
                        ,   2, 
                    SCT1,   2, 
                    Offset (0x14), 
                    PCB0,   1, 
                    PCB1,   1, 
                    SCB0,   1, 
                    SCB1,   1, 
                    PCCR,   2, 
                    SCCR,   2, 
                        ,   4, 
                    PUM0,   1, 
                    PUM1,   1, 
                    SUM0,   1, 
                    SUM1,   1, 
                    PSIG,   2, 
                    SSIG,   2
                }

                Method (GPIO, 4, NotSerialized)
                {
                    If (((Arg0 | Arg1) == 0x00))
                    {
                        Return (0xFFFFFFFF)
                    }
                    ElseIf (((Arg0 == 0x00) & (Arg1 == 0x01)))
                    {
                        Return (0x0384)
                    }

                    Return ((0x1E * (0x09 - (Arg2 + Arg3))))
                }

                Method (GDMA, 5, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        If ((Arg1 == 0x01))
                        {
                            If ((Arg4 == 0x02))
                            {
                                Return (0x0F)
                            }

                            Return (0x14)
                        }

                        If ((Arg2 == 0x01))
                        {
                            Return ((0x0F * (0x04 - Arg4)))
                        }

                        Return ((0x1E * (0x04 - Arg4)))
                    }

                    Return (0xFFFFFFFE)
                }

                Method (SFLG, 5, NotSerialized)
                {
                    Local0 = 0x00
                    Local0 |= Arg1
                    Local0 |= (Arg0 << 0x01)
                    Local0 |= (Arg2 << 0x03)
                    Local0 |= (Arg3 << 0x02)
                    Local0 |= (Arg4 << 0x04)
                    Return (Local0)
                }

                Method (SPIO, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00, 0x00                     // .....
                    })
                    CreateByteField (PBUF, 0x00, RCT)
                    CreateByteField (PBUF, 0x01, ISP)
                    CreateByteField (PBUF, 0x02, FAST)
                    CreateByteField (PBUF, 0x03, DMAE)
                    CreateByteField (PBUF, 0x04, PIOT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SPIO.PBUF */
                    }

                    If ((Arg0 > 0xF0))
                    {
                        DMAE = 0x01
                        PIOT = 0x00
                    }
                    Else
                    {
                        FAST = 0x01
                        If ((Arg1 & 0x02))
                        {
                            If (((Arg0 == 0x78) & (Arg2 & 0x02)))
                            {
                                RCT = 0x03
                                ISP = 0x02
                                PIOT = 0x04
                            }
                            ElseIf (((Arg0 <= 0xB4) & (Arg2 & 0x01)))
                            {
                                RCT = 0x01
                                ISP = 0x02
                                PIOT = 0x03
                            }
                            Else
                            {
                                RCT = 0x00
                                ISP = 0x01
                                PIOT = 0x02
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.EVSS.SPIO.PBUF */
                }

                Method (SDMA, 3, NotSerialized)
                {
                    Name (PBUF, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    CreateByteField (PBUF, 0x00, PCT)
                    CreateByteField (PBUF, 0x01, PCB)
                    CreateByteField (PBUF, 0x02, UDMT)
                    CreateByteField (PBUF, 0x03, UDME)
                    CreateByteField (PBUF, 0x04, DMAT)
                    If (((Arg0 == 0x00) || (Arg0 == 0xFFFFFFFF)))
                    {
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SDMA.PBUF */
                    }

                    If ((Arg0 <= 0x78))
                    {
                        If ((Arg1 & 0x04))
                        {
                            UDME = 0x01
                            If (((Arg0 == 0x0F) & (Arg2 & 0x40)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x06
                            }
                            ElseIf (((Arg0 == 0x14) & (Arg2 & 0x20)))
                            {
                                UDMT = 0x01
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x05
                            }
                            ElseIf (((Arg0 <= 0x1E) & (Arg2 & 0x10)))
                            {
                                PCB = 0x01
                                PCT = 0x02
                                DMAT = 0x04
                            }
                            ElseIf (((Arg0 <= 0x2D) & (Arg2 & 0x08)))
                            {
                                PCB = 0x01
                                PCT = 0x01
                                DMAT = 0x03
                            }
                            ElseIf (((Arg0 <= 0x3C) & (Arg2 & 0x04)))
                            {
                                PCT = 0x02
                                DMAT = 0x02
                            }
                            ElseIf (((Arg0 <= 0x5A) & (Arg2 & 0x02)))
                            {
                                PCT = 0x01
                                DMAT = 0x01
                            }
                            ElseIf (((Arg0 <= 0x78) & (Arg2 & 0x01)))
                            {
                                DMAT = 0x00
                            }
                        }
                    }

                    Return (PBUF) /* \_SB_.PCI0.EVSS.SDMA.PBUF */
                }

                Device (PRID)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (PFT0, PDE0, PRT0, PIP0)
                        If ((PSIT & 0x01))
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT1, PIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (PFT1, PDE1, PRT0, PIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM0, PUM0, PCB0, (PCCR & 0x01), PCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM1, PUM1, PCB1, (PCCR & 0x02), PCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.EVSS.PRID._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (PIE0, UDM0, PIE1, UDM1, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.EVSS.PRID._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            PSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            PRT0 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                            PIP0 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            PFT0 = FAST /* \_SB_.PCI0.EVSS.PRID._STM.FAST */
                            PDE0 = DMAE /* \_SB_.PCI0.EVSS.PRID._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.EVSS.PRID._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        If ((DMAE | FAST))
                        {
                            PFT1 = FAST /* \_SB_.PCI0.EVSS.PRID._STM.FAST */
                            PDE1 = DMAE /* \_SB_.PCI0.EVSS.PRID._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.EVSS.PRID._STM.TPIO */
                            If ((PSIT & 0x01))
                            {
                                PRT1 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                                PIP1 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            }
                            Else
                            {
                                PRT0 = RCT /* \_SB_.PCI0.EVSS.PRID._STM.RCT_ */
                                PIP0 = ISP /* \_SB_.PCI0.EVSS.PRID._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            PCT0 = PCT /* \_SB_.PCI0.EVSS.PRID._STM.PCT_ */
                            PCB0 = PCB /* \_SB_.PCI0.EVSS.PRID._STM.PCB_ */
                            UDM0 = UDME /* \_SB_.PCI0.EVSS.PRID._STM.UDME */
                            PUM0 = UDMT /* \_SB_.PCI0.EVSS.PRID._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.EVSS.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM0 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            PCT1 = PCT /* \_SB_.PCI0.EVSS.PRID._STM.PCT_ */
                            PCB1 = PCB /* \_SB_.PCI0.EVSS.PRID._STM.PCB_ */
                            UDM1 = UDME /* \_SB_.PCI0.EVSS.PRID._STM.UDME */
                            PUM1 = UDMT /* \_SB_.PCI0.EVSS.PRID._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.EVSS.PRID._STM.TDMA */
                        }
                        Else
                        {
                            UDM1 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            PIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            PIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.EVSS.PRID.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM0 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.EVSS.PRID.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.EVSS.PRID.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.EVSS.PRID.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.EVSS.PRID.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM1 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.EVSS.PRID.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.EVSS.PRID.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.EVSS.PRID.SLAV._GTF.ATA1 */
                        }
                    }
                }

                Device (SECD)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Name (TDM0, 0x00)
                    Name (TPI0, 0x00)
                    Name (TDM1, 0x00)
                    Name (TPI1, 0x00)
                    Name (DMT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (DMT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT1, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (POT2, Buffer (0x05)
                    {
                         0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Name (STMI, Buffer (0x14)
                    {
                        /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                        /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                    })
                    Method (_GTM, 0, NotSerialized)  // _GTM: Get Timing Mode
                    {
                        Name (PBUF, Buffer (0x14)
                        {
                            /* 0000 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                            /* 0010 */  0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateDWordField (PBUF, 0x00, PIO0)
                        CreateDWordField (PBUF, 0x04, DMA0)
                        CreateDWordField (PBUF, 0x08, PIO1)
                        CreateDWordField (PBUF, 0x0C, DMA1)
                        CreateDWordField (PBUF, 0x10, FLAG)
                        PIO0 = GPIO (SFT0, SDE0, SRT0, SIP0)
                        If ((SSIT & 0x01))
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT1, SIP1)
                        }
                        Else
                        {
                            PIO1 = GPIO (SFT1, SDE1, SRT0, SIP0)
                        }

                        If ((PIO0 == 0xFFFFFFFF))
                        {
                            DMA0 = PIO0 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO0 */
                        }
                        Else
                        {
                            DMA0 = GDMA (UDM2, SUM0, SCB0, (SCCR & 0x01), SCT0)
                            If ((DMA0 > PIO0))
                            {
                                DMA0 = PIO0 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO0 */
                            }
                        }

                        If ((PIO1 == 0xFFFFFFFF))
                        {
                            DMA1 = PIO1 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO1 */
                        }
                        Else
                        {
                            DMA1 = GDMA (UDM3, SUM1, SCB1, (SCCR & 0x02), SCT1)
                            If ((DMA1 > PIO1))
                            {
                                DMA1 = PIO1 /* \_SB_.PCI0.EVSS.SECD._GTM.PIO1 */
                            }
                        }

                        FLAG = SFLG (SIE0, UDM2, SIE1, UDM3, 0x01)
                        Return (PBUF) /* \_SB_.PCI0.EVSS.SECD._GTM.PBUF */
                    }

                    Method (_STM, 3, NotSerialized)  // _STM: Set Timing Mode
                    {
                        CreateDWordField (Arg0, 0x00, PIO0)
                        CreateDWordField (Arg0, 0x04, DMA0)
                        CreateDWordField (Arg0, 0x08, PIO1)
                        CreateDWordField (Arg0, 0x0C, DMA1)
                        CreateDWordField (Arg0, 0x10, FLAG)
                        STMI = Arg0
                        CreateWordField (Arg1, 0x6A, RPS0)
                        CreateWordField (Arg1, 0x80, IOM0)
                        CreateWordField (Arg1, 0xB0, DMM0)
                        CreateWordField (Arg2, 0x6A, RPS1)
                        CreateWordField (Arg2, 0x80, IOM1)
                        CreateWordField (Arg2, 0xB0, DMM1)
                        Name (IOTM, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (IOTM, 0x00, RCT)
                        CreateByteField (IOTM, 0x01, ISP)
                        CreateByteField (IOTM, 0x02, FAST)
                        CreateByteField (IOTM, 0x03, DMAE)
                        CreateByteField (IOTM, 0x04, TPIO)
                        Name (DMAT, Buffer (0x05)
                        {
                             0x00, 0x00, 0x00, 0x00                           // ....
                        })
                        CreateByteField (DMAT, 0x00, PCT)
                        CreateByteField (DMAT, 0x01, PCB)
                        CreateByteField (DMAT, 0x02, UDMT)
                        CreateByteField (DMAT, 0x03, UDME)
                        CreateByteField (DMAT, 0x04, TDMA)
                        If ((FLAG & 0x10))
                        {
                            SSIT = 0x01
                        }

                        IOTM = SPIO (PIO0, RPS0, IOM0)
                        If ((DMAE | FAST))
                        {
                            SRT0 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                            SIP0 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            SFT0 = FAST /* \_SB_.PCI0.EVSS.SECD._STM.FAST */
                            SDE0 = DMAE /* \_SB_.PCI0.EVSS.SECD._STM.DMAE */
                            TPI0 = TPIO /* \_SB_.PCI0.EVSS.SECD._STM.TPIO */
                        }

                        IOTM = SPIO (PIO1, RPS1, IOM1)
                        POT2 = IOTM /* \_SB_.PCI0.EVSS.SECD._STM.IOTM */
                        If ((DMAE | FAST))
                        {
                            SFT1 = FAST /* \_SB_.PCI0.EVSS.SECD._STM.FAST */
                            SDE1 = DMAE /* \_SB_.PCI0.EVSS.SECD._STM.DMAE */
                            TPI1 = TPIO /* \_SB_.PCI0.EVSS.SECD._STM.TPIO */
                            If ((SSIT & 0x01))
                            {
                                SRT1 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                                SIP1 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            }
                            Else
                            {
                                SRT0 = RCT /* \_SB_.PCI0.EVSS.SECD._STM.RCT_ */
                                SIP0 = ISP /* \_SB_.PCI0.EVSS.SECD._STM.ISP_ */
                            }
                        }

                        If ((FLAG & 0x01))
                        {
                            DMAT = SDMA (DMA0, RPS0, DMM0)
                            SCT0 = PCT /* \_SB_.PCI0.EVSS.SECD._STM.PCT_ */
                            SCB0 = PCB /* \_SB_.PCI0.EVSS.SECD._STM.PCB_ */
                            UDM2 = UDME /* \_SB_.PCI0.EVSS.SECD._STM.UDME */
                            SUM0 = UDMT /* \_SB_.PCI0.EVSS.SECD._STM.UDMT */
                            TDM0 = TDMA /* \_SB_.PCI0.EVSS.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM2 = 0x00
                        }

                        If ((FLAG & 0x04))
                        {
                            DMAT = SDMA (DMA1, RPS1, DMM1)
                            SCT1 = PCT /* \_SB_.PCI0.EVSS.SECD._STM.PCT_ */
                            SCB1 = PCB /* \_SB_.PCI0.EVSS.SECD._STM.PCB_ */
                            UDM3 = UDME /* \_SB_.PCI0.EVSS.SECD._STM.UDME */
                            SUM1 = UDMT /* \_SB_.PCI0.EVSS.SECD._STM.UDMT */
                            TDM1 = TDMA /* \_SB_.PCI0.EVSS.SECD._STM.TDMA */
                        }
                        Else
                        {
                            UDM3 = 0x00
                        }

                        If ((FLAG & 0x02))
                        {
                            SIE0 = 0x01
                        }

                        If ((FLAG & 0x08))
                        {
                            SIE1 = 0x01
                        }
                    }

                    Device (MAST)
                    {
                        Name (_ADR, 0x00)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA0, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xA0, 0xEF               // ......
                            })
                            CreateByteField (ATA0, 0x01, PIO0)
                            CreateByteField (ATA0, 0x08, DMA0)
                            PIO0 = TPI0 /* \_SB_.PCI0.EVSS.SECD.TPI0 */
                            PIO0 |= 0x08
                            If ((UDM2 & 0x01))
                            {
                                DMA0 = TDM0 /* \_SB_.PCI0.EVSS.SECD.TDM0 */
                                DMA0 |= 0x40
                            }
                            Else
                            {
                                DMA0 = TPI0 /* \_SB_.PCI0.EVSS.SECD.TPI0 */
                                If ((DMA0 != 0x00))
                                {
                                    DMA0 -= 0x02
                                }

                                DMA0 |= 0x20
                            }

                            Return (ATA0) /* \_SB_.PCI0.EVSS.SECD.MAST._GTF.ATA0 */
                        }
                    }

                    Device (SLAV)
                    {
                        Name (_ADR, 0x01)  // _ADR: Address
                        Method (_GTF, 0, NotSerialized)  // _GTF: Get Task File
                        {
                            Name (ATA1, Buffer (0x0E)
                            {
                                /* 0000 */  0x03, 0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF, 0x03,  // ........
                                /* 0008 */  0x00, 0x00, 0x00, 0x00, 0xB0, 0xEF               // ......
                            })
                            CreateByteField (ATA1, 0x01, PIO1)
                            CreateByteField (ATA1, 0x08, DMA1)
                            PIO1 = TPI1 /* \_SB_.PCI0.EVSS.SECD.TPI1 */
                            PIO1 |= 0x08
                            If ((UDM3 & 0x01))
                            {
                                DMA1 = TDM1 /* \_SB_.PCI0.EVSS.SECD.TDM1 */
                                DMA1 |= 0x40
                            }
                            Else
                            {
                                DMA1 = TPI1 /* \_SB_.PCI0.EVSS.SECD.TPI1 */
                                If ((DMA1 != 0x00))
                                {
                                    DMA1 -= 0x02
                                }

                                DMA1 |= 0x20
                            }

                            Return (ATA1) /* \_SB_.PCI0.EVSS.SECD.SLAV._GTF.ATA1 */
                        }
                    }
                }
            }

            Device (DMI0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
            }

            Device (BR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG20) /* \_SB_.AG20 */
                    }

                    Return (PG20) /* \_SB_.PG20 */
                }

                Device (D074)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG21) /* \_SB_.AG21 */
                    }

                    Return (PG21) /* \_SB_.PG21 */
                }

                Device (D075)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG22) /* \_SB_.AG22 */
                    }

                    Return (PG22) /* \_SB_.PG22 */
                }

                Device (D070)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG23) /* \_SB_.AG23 */
                    }

                    Return (PG23) /* \_SB_.PG23 */
                }

                Device (D071)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG24) /* \_SB_.AG24 */
                    }

                    Return (PG24) /* \_SB_.PG24 */
                }

                Device (D072)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG25) /* \_SB_.AG25 */
                    }

                    Return (PG25) /* \_SB_.PG25 */
                }

                Device (D073)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG26) /* \_SB_.AG26 */
                    }

                    Return (PG26) /* \_SB_.PG26 */
                }

                Device (D076)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG27) /* \_SB_.AG27 */
                    }

                    Return (PG27) /* \_SB_.PG27 */
                }

                Device (D077)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG28) /* \_SB_.AG28 */
                    }

                    Return (PG28) /* \_SB_.PG28 */
                }

                Device (D078)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (BR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI0.BR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI0.BR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI0.BR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI0.BR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI0.BR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI0.BR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI0.BR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI0.BR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI0.BR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI0.BR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI0.BR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI0.BR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI0.BR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI0.BR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI0.BR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI0.BR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI0.BR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI0.BR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }

                Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
                {
                    If (PICM)
                    {
                        Return (AG29) /* \_SB_.AG29 */
                    }

                    Return (PG29) /* \_SB_.PG29 */
                }

                Device (D079)
                {
                    Name (_ADR, 0xFFFF)  // _ADR: Address
                }
            }

            Device (CB0A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB0B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB0C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB0D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB0E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB0F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB0G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB0H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI1)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BN80, 0, NotSerialized)
            {
                Return (0x80)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BN80 ())
            }

            Name (_UID, 0x80)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (AR80) /* \_SB_.AR80 */
                }

                Return (PD80) /* \_SB_.PD80 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI1._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI1._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^QRP0.OSHP ()
                                ^QR1A.OSHP ()
                                ^QR1B.OSHP ()
                                ^QR2A.OSHP ()
                                ^QR2B.OSHP ()
                                ^QR2C.OSHP ()
                                ^QR2D.OSHP ()
                                ^QR3A.OSHP ()
                                ^QR3B.OSHP ()
                                ^QR3C.OSHP ()
                                ^QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI1._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Method (BN40, 0, NotSerialized)
            {
                Return (BBI1) /* \BBI1 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x01)
                }
                Else
                {
                    Return (0x02)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO1PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x31, 0x00, 0x00, 0x00, 0x00,  // DRH1....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x31, 0x00, 0x00, 0x00, 0x00,  // ATS1....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x31, 0x00, 0x00, 0x00, 0x00,  // RHS1....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x01)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P1RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4158,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x5758,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x5858,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P1RS) /* \_SB_.PCI1.P1RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM2,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "01-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM3,   7
                }
            }

            Name (_EJD, "\\_SB.SCK1")  // _EJD: Ejection Dependent Device
            Device (QRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (QR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI1.QR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI1.QR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI1.QR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI1.QR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI1.QR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI1.QR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI1.QR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI1.QR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI1.QR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI1.QR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI1.QR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI1.QR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI1.QR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI1.QR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI1.QR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI1.QR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI1.QR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI1.QR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI1")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB1A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB1B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB1C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB1D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB1E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB1F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB1G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB1H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI2)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BNC0, 0, NotSerialized)
            {
                Return (0xC0)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BNC0 ())
            }

            Name (_UID, 0xC0)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (ARC0) /* \_SB_.ARC0 */
                }

                Return (PDC0) /* \_SB_.PDC0 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI2._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI2._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^RRP0.OSHP ()
                                ^RR1A.OSHP ()
                                ^RR1B.OSHP ()
                                ^RR2A.OSHP ()
                                ^RR2B.OSHP ()
                                ^RR2C.OSHP ()
                                ^RR2D.OSHP ()
                                ^RR3A.OSHP ()
                                ^RR3B.OSHP ()
                                ^RR3C.OSHP ()
                                ^RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI3.SRP0.OSHP ()
                                ^^PCI3.SR1A.OSHP ()
                                ^^PCI3.SR1B.OSHP ()
                                ^^PCI3.SR2A.OSHP ()
                                ^^PCI3.SR2B.OSHP ()
                                ^^PCI3.SR2C.OSHP ()
                                ^^PCI3.SR2D.OSHP ()
                                ^^PCI3.SR3A.OSHP ()
                                ^^PCI3.SR3B.OSHP ()
                                ^^PCI3.SR3C.OSHP ()
                                ^^PCI3.SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI2._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Method (BN80, 0, NotSerialized)
            {
                Return (BBI2) /* \BBI2 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x02)
                }
                Else
                {
                    Return (0x04)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO2PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x32, 0x00, 0x00, 0x00, 0x00,  // DRH2....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x32, 0x00, 0x00, 0x00, 0x00,  // ATS2....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x32, 0x00, 0x00, 0x00, 0x00,  // RHS2....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x02)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P2RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4558,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4259,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4359,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P2RS) /* \_SB_.PCI2.P2RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM4,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "02-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM5,   7
                }
            }

            Name (_EJD, "\\_SB.SCK2")  // _EJD: Ejection Dependent Device
            Device (RRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (RR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI2.RR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI2.RR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI2.RR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI2.RR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI2.RR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI2.RR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI2.RR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI2.RR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI2.RR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI2.RR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI2.RR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI2.RR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI2.RR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI2.RR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI2.RR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI2.RR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI2.RR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI2.RR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI2")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB2A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB2B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB2C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB2D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB2E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB2F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB2G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB2H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }

        Device (PCI3)
        {
            Name (_HID, EisaId ("PNP0A08") /* PCI Express Bus */)  // _HID: Hardware ID
            Name (_CID, EisaId ("PNP0A03") /* PCI Bus */)  // _CID: Compatible ID
            Name (_ADR, 0xFFFF)  // _ADR: Address
            Method (^BNE0, 0, NotSerialized)
            {
                Return (0xE0)
            }

            Method (_BBN, 0, NotSerialized)  // _BBN: BIOS Bus Number
            {
                Return (BNE0 ())
            }

            Name (_UID, 0xE0)  // _UID: Unique ID
            Method (_PRT, 0, NotSerialized)  // _PRT: PCI Routing Table
            {
                If (PICM)
                {
                    Return (ARE0) /* \_SB_.ARE0 */
                }

                Return (PDE0) /* \_SB_.PDE0 */
            }

            Method (_OSC, 4, Serialized)  // _OSC: Operating System Capabilities
            {
                Name (SUPP, 0x00)
                Name (CTRL, 0x00)
                CreateDWordField (Arg3, 0x00, CDW1)
                CreateDWordField (Arg3, 0x04, CDW2)
                If ((Arg2 > 0x02))
                {
                    CreateDWordField (Arg3, 0x08, CDW3)
                }

                Local0 = _BBN ()
                If ((Local0 == 0x00))
                {
                    If ((Arg0 == ToUUID ("7c9512a9-1705-4cb4-af7d-506a2423ab71") /* Unknown UUID */))
                    {
                        Return (^^PCI0.XHCI.POSC (Arg1, Arg2, Arg3))
                    }
                }

                If ((Arg0 == ToUUID ("33db4d5b-1ff7-401c-9657-7441c03dd766") /* PCI Host Bridge Device */))
                {
                    SUPP = CDW2 /* \_SB_.PCI3._OSC.CDW2 */
                    CTRL = CDW3 /* \_SB_.PCI3._OSC.CDW3 */
                    If ((AHPE || ((SUPP & 0x16) != 0x16)))
                    {
                        CTRL &= 0x1E
                        Sleep (0x03E8)
                    }

                    CTRL &= 0x1D
                    If (!PEPM)
                    {
                        CTRL &= 0x1B
                    }

                    If (!PEER)
                    {
                        CTRL &= 0x15
                    }

                    If (!PECS)
                    {
                        CTRL &= 0x0F
                    }

                    If (~(CDW1 & 0x01))
                    {
                        If ((CTRL & 0x01))
                        {
                            ^^PCI0.BR1A.OSHP ()
                            ^^PCI0.BR1B.OSHP ()
                            ^^PCI0.BR2A.OSHP ()
                            ^^PCI0.BR2B.OSHP ()
                            ^^PCI0.BR2C.OSHP ()
                            ^^PCI0.BR2D.OSHP ()
                            ^^PCI0.BR3A.OSHP ()
                            ^^PCI0.BR3B.OSHP ()
                            ^^PCI0.BR3C.OSHP ()
                            ^^PCI0.BR3D.OSHP ()
                            Local1 = (IIOH >> 0x01)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI1.QRP0.OSHP ()
                                ^^PCI1.QR1A.OSHP ()
                                ^^PCI1.QR1B.OSHP ()
                                ^^PCI1.QR2A.OSHP ()
                                ^^PCI1.QR2B.OSHP ()
                                ^^PCI1.QR2C.OSHP ()
                                ^^PCI1.QR2D.OSHP ()
                                ^^PCI1.QR3A.OSHP ()
                                ^^PCI1.QR3B.OSHP ()
                                ^^PCI1.QR3C.OSHP ()
                                ^^PCI1.QR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x02)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^^PCI2.RRP0.OSHP ()
                                ^^PCI2.RR1A.OSHP ()
                                ^^PCI2.RR1B.OSHP ()
                                ^^PCI2.RR2A.OSHP ()
                                ^^PCI2.RR2B.OSHP ()
                                ^^PCI2.RR2C.OSHP ()
                                ^^PCI2.RR2D.OSHP ()
                                ^^PCI2.RR3A.OSHP ()
                                ^^PCI2.RR3B.OSHP ()
                                ^^PCI2.RR3C.OSHP ()
                                ^^PCI2.RR3D.OSHP ()
                            }

                            Local1 = (IIOH >> 0x03)
                            Local1 &= 0x01
                            If ((Local1 == 0x01))
                            {
                                ^SRP0.OSHP ()
                                ^SR1A.OSHP ()
                                ^SR1B.OSHP ()
                                ^SR2A.OSHP ()
                                ^SR2B.OSHP ()
                                ^SR2C.OSHP ()
                                ^SR2D.OSHP ()
                                ^SR3A.OSHP ()
                                ^SR3B.OSHP ()
                                ^SR3C.OSHP ()
                                ^SR3D.OSHP ()
                            }

                            GPSH = 0x01
                        }

                        If ((Arg1 != One))
                        {
                            CDW1 |= 0x08
                        }

                        If ((CDW3 != CTRL))
                        {
                            CDW1 |= 0x10
                        }

                        CDW3 = CTRL /* \_SB_.PCI3._OSC.CTRL */
                        Return (Arg3)
                    }
                    Else
                    {
                        CDW1 |= 0x04
                        IO80 = 0xEE
                        Return (Arg3)
                    }
                }
            }

            Method (BNC0, 0, NotSerialized)
            {
                Return (BBI3) /* \BBI3 */
            }

            Method (_PXM, 0, NotSerialized)  // _PXM: Device Proximity
            {
                If ((CLOD == 0x00))
                {
                    Return (0x03)
                }
                Else
                {
                    Return (0x06)
                }
            }

            Device (IIOP)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                Name (_UID, "IIO3PRES")  // _UID: Unique ID
                OperationRegion (IIOR, PCI_Config, 0x00, 0x02)
                Field (IIOR, ByteAcc, NoLock, Preserve)
                {
                    VID0,   16
                }

                Method (_DSM, 4, Serialized)  // _DSM: Device-Specific Method
                {
                    If ((Arg0 == ToUUID ("d8c1a3a6-be9b-4c9b-91bf-c3cb81fc5daf") /* Dynamic Enumeration */))
                    {
                        Switch (ToInteger (Arg2))
                        {
                            Case (0x00)
                            {
                                Return (Buffer (0x01)
                                {
                                     0x1F                                             // .
                                })
                            }
                            Case (0x01)
                            {
                                Return (Buffer (0x025C)
                                {
                                    /* 0000 */  0x44, 0x52, 0x48, 0x33, 0x00, 0x00, 0x00, 0x00,  // DRH3....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0100 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0108 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0110 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0118 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0120 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0128 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0130 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0138 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0140 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0148 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0150 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0158 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0160 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0168 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0170 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0178 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0180 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0188 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0190 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0198 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01C8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01D8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01E8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 01F8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0200 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0208 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0210 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0218 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0220 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0228 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0230 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0238 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0240 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0248 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0250 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0258 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x02)
                            {
                                Return (Buffer (0xCC)
                                {
                                    /* 0000 */  0x41, 0x54, 0x53, 0x33, 0x00, 0x00, 0x00, 0x00,  // ATS3....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0068 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0070 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0078 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0080 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0088 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0090 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0098 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00A8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00B8 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C0 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 00C8 */  0x00, 0x00, 0x00, 0x00                           // ....
                                })
                            }
                            Case (0x03)
                            {
                                Return (Buffer (0x68)
                                {
                                    /* 0000 */  0x52, 0x48, 0x53, 0x33, 0x00, 0x00, 0x00, 0x00,  // RHS3....
                                    /* 0008 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0010 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0018 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0020 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0028 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0030 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0038 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0040 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0048 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0050 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0058 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,  // ........
                                    /* 0060 */  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00   // ........
                                })
                            }
                            Default
                            {
                            }

                        }
                    }

                    Return (Buffer (0x01)
                    {
                         0x00                                             // .
                    })
                }
            }

            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local1 = (IIOH >> 0x03)
                Local1 &= 0x01
                If ((Local1 == 0x00))
                {
                    Return (0x00)
                }
                Else
                {
                    Return (0x0F)
                }
            }

            Name (P3RS, ResourceTemplate ()
            {
                WordBusNumber (ResourceProducer, MinFixed, MaxFixed, PosDecode,
                    0x0000,             // Granularity
                    0x0000,             // Range Minimum
                    0x00FE,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x00FF,             // Length
                    ,, )
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, Cacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4958,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0001,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4559,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                WordIO (ResourceProducer, MinFixed, MaxFixed, PosDecode, EntireRange,
                    0x0000,             // Granularity
                    0x4659,             // Range Minimum
                    0x0000,             // Range Maximum
                    0x0000,             // Translation Offset
                    0x0000,             // Length
                    ,, , TypeStatic, DenseTranslation)
                DWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x00000000,         // Granularity
                    0x00000000,         // Range Minimum
                    0x00000000,         // Range Maximum
                    0x00000000,         // Translation Offset
                    0x00000000,         // Length
                    ,, , AddressRangeMemory, TypeStatic)
                QWordMemory (ResourceProducer, PosDecode, MinFixed, MaxFixed, NonCacheable, ReadWrite,
                    0x0000000000000000, // Granularity
                    0x0000000000000000, // Range Minimum
                    0x0000000000000000, // Range Maximum
                    0x0000000000000000, // Translation Offset
                    0x0000000000000000, // Length
                    ,, , AddressRangeMemory, TypeStatic)
            })
            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Return (P3RS) /* \_SB_.PCI3.P3RS */
            }

            Device (MHP0)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-00")  // _UID: Unique ID
                OperationRegion (MHP0, PCI_Config, 0x0E, 0x02)
                Field (MHP0, ByteAcc, NoLock, Preserve)
                {
                    STM6,   7
                }
            }

            Device (MHP1)
            {
                Name (_ADR, 0x00050001)  // _ADR: Address
                Name (_UID, "03-01")  // _UID: Unique ID
                OperationRegion (MHP1, PCI_Config, 0x1E, 0x02)
                Field (MHP1, ByteAcc, NoLock, Preserve)
                {
                    STM7,   7
                }
            }

            Name (_EJD, "\\_SB.SCK3")  // _EJD: Ejection Dependent Device
            Device (SRP0)
            {
                Name (_ADR, 0x00)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001B188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SRP0.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SRP0.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SRP0.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SRP0.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SRP0.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SRP0.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SRP0.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SRP0.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SRP0.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SRP0.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SRP0.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SRP0.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SRP0.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SRP0.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SRP0.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SRP0.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SRP0.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SRP0.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR1A)
            {
                Name (_ADR, 0x00010000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80000188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR1A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR1A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR1A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR1A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR1A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR1A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR1A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR1A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR1A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR1A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR1A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR1A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR1A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR1A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR1A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR1A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR1A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR1B)
            {
                Name (_ADR, 0x00010001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80008188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR1B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR1B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR1B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR1B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR1B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR1B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR1B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR1B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR1B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR1B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR1B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR1B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR1B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR1B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR1B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR1B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR1B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR1B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2A)
            {
                Name (_ADR, 0x00020000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80009188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2B)
            {
                Name (_ADR, 0x00020001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80010188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2C)
            {
                Name (_ADR, 0x00020002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80011188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR2D)
            {
                Name (_ADR, 0x00020003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80012188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR2D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR2D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR2D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR2D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR2D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR2D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR2D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR2D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR2D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR2D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR2D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR2D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR2D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR2D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR2D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR2D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR2D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR2D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3A)
            {
                Name (_ADR, 0x00030000)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80013188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3A.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3A.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3A.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3A.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3A.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3A.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3A.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3A.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3A.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3A.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3A.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3A.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3A.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3A.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3A.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3A.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3A.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3A.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3B)
            {
                Name (_ADR, 0x00030001)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80018188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3B.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3B.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3B.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3B.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3B.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3B.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3B.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3B.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3B.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3B.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3B.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3B.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3B.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3B.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3B.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3B.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3B.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3B.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3C)
            {
                Name (_ADR, 0x00030002)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x80019188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3C.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3C.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3C.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3C.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3C.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3C.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3C.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3C.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3C.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3C.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3C.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3C.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3C.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3C.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3C.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3C.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3C.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3C.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (SR3D)
            {
                Name (_ADR, 0x00030003)  // _ADR: Address
                OperationRegion (MCTL, SystemMemory, 0x8001A188, 0x04)
                Field (MCTL, ByteAcc, NoLock, Preserve)
                {
                        ,   3, 
                    HGPE,   1, 
                        ,   7, 
                        ,   8, 
                        ,   8
                }

                Method (_INI, 0, NotSerialized)  // _INI: Initialize
                {
                    HGPE = 0x01
                }

                Name (_HPP, Package (0x04)  // _HPP: Hot Plug Parameters
                {
                    0x08, 
                    0x40, 
                    0x01, 
                    0x00
                })
                Name (SHPC, 0x40)
                Name (SPDS, 0x40)
                Name (MRLS, 0x00)
                Name (CCOM, 0x10)
                Name (SPDC, 0x08)
                Name (MRLC, 0x04)
                Name (SPFD, 0x02)
                Name (SABP, 0x01)
                Name (SPOF, 0x10)
                Name (SPON, 0x0F)
                Name (ALMK, 0x1C)
                Name (ALON, 0x01)
                Name (ALBL, 0x02)
                Name (ALOF, 0x03)
                Name (PLMK, 0x13)
                Name (PLON, 0x04)
                Name (PLBL, 0x08)
                Name (PLOF, 0x0C)
                Name (HPEV, 0x0F)
                OperationRegion (PPA4, PCI_Config, 0x00, 0x0100)
                Field (PPA4, ByteAcc, NoLock, Preserve)
                {
                    Offset (0xA0), 
                        ,   4, 
                    LDIS,   1, 
                    Offset (0xA2), 
                    Offset (0xA4), 
                    ATBP,   1, 
                        ,   1, 
                    MRSP,   1, 
                    ATIP,   1, 
                    PWIP,   1, 
                    HPSR,   1, 
                    HPCP,   1, 
                        ,   12, 
                    PSNM,   13, 
                    ABIE,   1, 
                    PFIE,   1, 
                    MSIE,   1, 
                    PDIE,   1, 
                    CCIE,   1, 
                    HPIE,   1, 
                    SCTL,   5, 
                    Offset (0xAA), 
                    SSTS,   7, 
                    Offset (0xAB), 
                    Offset (0xB0), 
                    Offset (0xB2), 
                    PMES,   1, 
                    PMEP,   1, 
                    Offset (0xB4)
                }

                Method (ATID, 0, NotSerialized)
                {
                    Return ((SCTL & 0x03))
                }

                Method (PWID, 0, NotSerialized)
                {
                    Return (((SCTL & 0x0C) >> 0x02))
                }

                Method (PWCC, 0, NotSerialized)
                {
                    Return (((SCTL & 0x10) >> 0x04))
                }

                Method (ABPS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x01
                    }

                    Return ((SSTS & 0x01))
                }

                Method (PFDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x02
                    }

                    Return (((SSTS & 0x02) >> 0x01))
                }

                Method (MSCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x04
                    }

                    Return (((SSTS & 0x04) >> 0x02))
                }

                Method (PDCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x08
                    }

                    Return (((SSTS & 0x08) >> 0x03))
                }

                Method (CMCS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x10
                    }

                    Return (((SSTS & 0x10) >> 0x04))
                }

                Method (MSSC, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x20
                    }

                    Return (((SSTS & 0x20) >> 0x05))
                }

                Method (PRDS, 1, NotSerialized)
                {
                    If ((Arg0 == 0x01))
                    {
                        SSTS |= 0x40
                    }

                    Return (((SSTS & 0x40) >> 0x06))
                }

                Method (OSHP, 0, NotSerialized)
                {
                    SSTS = SSTS /* \_SB_.PCI3.SR3D.SSTS */
                    HGPE = 0x00
                }

                Method (HPCC, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local1 = 0x00
                    If ((Arg0 != Local0))
                    {
                        SCTL = Arg0
                        While ((!CMCS (0x00) && (0x64 != Local1)))
                        {
                            IO80 = 0xFB
                            Sleep (0x02)
                            Local1 += 0x02
                        }

                        CMCS (0x01)
                    }
                }

                Method (ATCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 &= ALMK /* \_SB_.PCI3.SR3D.ALMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= ALON /* \_SB_.PCI3.SR3D.ALON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= ALBL /* \_SB_.PCI3.SR3D.ALBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= ALOF /* \_SB_.PCI3.SR3D.ALOF */
                    }

                    HPCC (Local0)
                }

                Method (PWCM, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 &= PLMK /* \_SB_.PCI3.SR3D.PLMK */
                    If ((Arg0 == 0x01))
                    {
                        Local0 |= PLON /* \_SB_.PCI3.SR3D.PLON */
                    }

                    If ((Arg0 == 0x02))
                    {
                        Local0 |= PLBL /* \_SB_.PCI3.SR3D.PLBL */
                    }

                    If ((Arg0 == 0x03))
                    {
                        Local0 |= PLOF /* \_SB_.PCI3.SR3D.PLOF */
                    }

                    HPCC (Local0)
                }

                Method (PWSL, 1, NotSerialized)
                {
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    If (Arg0)
                    {
                        Local0 &= SPON /* \_SB_.PCI3.SR3D.SPON */
                    }
                    Else
                    {
                        Local0 |= SPOF /* \_SB_.PCI3.SR3D.SPOF */
                    }

                    HPCC (Local0)
                }

                Method (_OST, 3, Serialized)  // _OST: OSPM Status Indication
                {
                    Switch ((Arg0 & 0xFF))
                    {
                        Case (0x03)
                        {
                            Switch (ToInteger (Arg1))
                            {
                                Case (Package (0x04)
                                    {
                                        0x80, 
                                        0x81, 
                                        0x82, 
                                        0x83
                                    }

)
                                {
                                    If (!PWCC ())
                                    {
                                        PWCM (0x01)
                                        ABIE = 0x01
                                    }
                                }

                            }
                        }

                    }
                }

                Method (EJ0L, 1, NotSerialized)
                {
                    IO80 = 0xFF
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    If ((ATID () != 0x01))
                    {
                        Local0 &= ALMK /* \_SB_.PCI3.SR3D.ALMK */
                        Local0 |= ALBL /* \_SB_.PCI3.SR3D.ALBL */
                    }

                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= SPOF /* \_SB_.PCI3.SR3D.SPOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= PLOF /* \_SB_.PCI3.SR3D.PLOF */
                    HPCC (Local0)
                    Local0 = SCTL /* \_SB_.PCI3.SR3D.SCTL */
                    Local0 |= ALOF /* \_SB_.PCI3.SR3D.ALOF */
                    HPCC (Local0)
                }

                Method (PMEH, 1, NotSerialized)
                {
                    If ((HPEV & SSTS))
                    {
                        If (ABPS (0x00))
                        {
                            ABPS (0x01)
                            Sleep (0xC8)
                        }
                    }

                    Return (0xFF)
                }

                Method (HPEH, 1, NotSerialized)
                {
                    If (!HPCP)
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFE
                    Sleep (0x64)
                    CCIE = 0x00
                    If ((HPEV & SSTS))
                    {
                        IO80 = 0xFD
                        Sleep (0x0A)
                        Local0 = PPXH (0x00)
                        Return (Local0)
                    }
                    Else
                    {
                        Return (0xFF)
                    }

                    IO80 = 0xFC
                    Sleep (0x0A)
                }

                Method (PPXH, 1, NotSerialized)
                {
                    Sleep (0xC8)
                    If (ABPS (0x00))
                    {
                        If (!PRDS (0x00))
                        {
                            LDIS = 0x01
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            ABPS (0x01)
                            Sleep (0xC8)
                            Return (0xFF)
                        }

                        ABIE = 0x00
                        ABPS (0x01)
                        Sleep (0xC8)
                        If (PWCC ())
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABIE = 0x01
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0x0258)
                                    LDIS = 0x00
                                    PWSL (0x01)
                                    Sleep (0x01F4)
                                    If (!PFDS (0x00))
                                    {
                                        PWCM (0x01)
                                        Local1 = 0x00
                                        ABIE = 0x01
                                    }
                                    Else
                                    {
                                        PWSL (0x00)
                                        PWCM (0x03)
                                        ATCM (0x01)
                                        LDIS = 0x01
                                        Local1 = 0x03
                                        ABIE = 0x01
                                    }

                                    ABPS (0x01)
                                    Sleep (0xC8)
                                    Return (Local1)
                                }
                            }

                            Return (0xFF)
                        }
                        Else
                        {
                            ATCM (0x02)
                            Sleep (0x0258)
                            Local0 = 0x0258
                            ABPS (0x01)
                            Sleep (0xC8)
                            While (!ABPS (0x00))
                            {
                                Sleep (0xC8)
                                Local0 += 0xC8
                                If ((0x1388 == Local0))
                                {
                                    ABPS (0x01)
                                    ATCM (0x03)
                                    PWCM (0x02)
                                    Sleep (0xC8)
                                    ABIE = 0x01
                                    LDIS = 0x01
                                    PWCM (0x03)
                                    Return (0x03)
                                }
                            }

                            PWCM (0x01)
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Return (0xFF)
                        }
                    }

                    If (PFDS (0x00))
                    {
                        PFDS (0x01)
                        PWSL (0x00)
                        PWCM (0x03)
                        ATCM (0x01)
                        LDIS = 0x01
                        Return (0x03)
                    }

                    If (PDCS (0x00))
                    {
                        PDCS (0x01)
                        If (!PRDS (0x00))
                        {
                            PWSL (0x00)
                            PWCM (0x03)
                            If ((MSSC (0x00) == MRLS))
                            {
                                ATCM (0x02)
                            }
                            Else
                            {
                                ATCM (0x03)
                            }

                            LDIS = 0x01
                            Return (0xFF)
                        }
                        Else
                        {
                            LDIS = 0x00
                            ABPS (0x01)
                            Sleep (0xC8)
                            ABIE = 0x01
                            Sleep (0xC8)
                            Return (Local1)
                        }
                    }

                    Return (0xFF)
                }

                Method (SNUM, 0, Serialized)
                {
                    Local0 = PSNM /* \_SB_.PCI3.SR3D.PSNM */
                    Return (Local0)
                }

                Device (H000)
                {
                    Name (_ADR, 0x00)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H001)
                {
                    Name (_ADR, 0x01)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H002)
                {
                    Name (_ADR, 0x02)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H003)
                {
                    Name (_ADR, 0x03)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H004)
                {
                    Name (_ADR, 0x04)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H005)
                {
                    Name (_ADR, 0x05)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H006)
                {
                    Name (_ADR, 0x06)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Device (H007)
                {
                    Name (_ADR, 0x07)  // _ADR: Address
                    Method (_SUN, 0, NotSerialized)  // _SUN: Slot User Number
                    {
                        Return (SNUM ())
                    }
                }

                Name (_EJD, "\\_SB.PCI3")  // _EJD: Ejection Dependent Device
                OperationRegion (PXCS, PCI_Config, 0x00, 0xE0)
                Field (PXCS, AnyAcc, NoLock, Preserve)
                {
                    VDID,   32, 
                    Offset (0x54), 
                        ,   6, 
                    HPCE,   1, 
                    Offset (0x5A), 
                    ABPX,   1, 
                        ,   2, 
                    PDCX,   1, 
                        ,   2, 
                    PDSX,   1, 
                    Offset (0x5B), 
                    Offset (0x60), 
                    Offset (0x62), 
                    PMEX,   1, 
                    Offset (0xDC), 
                        ,   31, 
                    PMCS,   1
                }

                Method (DEVS, 0, NotSerialized)
                {
                    If ((VDID == 0xFFFFFFFF))
                    {
                        Return (0x00)
                    }
                    Else
                    {
                        Return (0x0F)
                    }
                }

                Method (HPME, 0, Serialized)
                {
                    If (PMEX)
                    {
                        Local0 = 0xC8
                        While (Local0)
                        {
                            PMEX = 0x01
                            If (PMEX)
                            {
                                Local0--
                            }
                            Else
                            {
                                Local0 = 0x00
                            }
                        }

                        PMCS = 0x01
                    }
                }

                Method (_PRW, 0, NotSerialized)  // _PRW: Power Resources for Wake
                {
                    Return (GPRW (0x09, 0x04))
                }
            }

            Device (CB3A)
            {
                Name (_ADR, 0x00040000)  // _ADR: Address
            }

            Device (CB3B)
            {
                Name (_ADR, 0x00040001)  // _ADR: Address
            }

            Device (CB3C)
            {
                Name (_ADR, 0x00040002)  // _ADR: Address
            }

            Device (CB3D)
            {
                Name (_ADR, 0x00040003)  // _ADR: Address
            }

            Device (CB3E)
            {
                Name (_ADR, 0x00040004)  // _ADR: Address
            }

            Device (CB3F)
            {
                Name (_ADR, 0x00040005)  // _ADR: Address
            }

            Device (CB3G)
            {
                Name (_ADR, 0x00040006)  // _ADR: Address
            }

            Device (CB3H)
            {
                Name (_ADR, 0x00040007)  // _ADR: Address
            }
        }
    }

    Scope (_GPE)
    {
        Method (_L0B, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.IP2P, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }

        Method (_L0D, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Notify (\_SB.PCI0.XHCI, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC1, 0x02) // Device Wake
            Notify (\_SB.PCI0.EHC2, 0x02) // Device Wake
            Notify (\_SB.PWRB, 0x02) // Device Wake
        }
    }

    Scope (_SB)
    {
        Device (PWRB)
        {
            Name (_HID, EisaId ("PNP0C0C") /* Power Button Device */)  // _HID: Hardware ID
            Name (_UID, 0xAA)  // _UID: Unique ID
            Name (_STA, 0x0B)  // _STA: Status
        }
    }

    Name (_S0, Package (0x04)  // _S0_: S0 System State
    {
        0x00, 
        0x00, 
        0x00, 
        0x00
    })
    Name (XS3, Package (0x04)
    {
        0x05, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S4, Package (0x04)  // _S4_: S4 System State
    {
        0x06, 
        0x00, 
        0x00, 
        0x00
    })
    Name (_S5, Package (0x04)  // _S5_: S5 System State
    {
        0x07, 
        0x00, 
        0x00, 
        0x00
    })
    Method (_PTS, 1, NotSerialized)  // _PTS: Prepare To Sleep
    {
        If (Arg0)
        {
            \_SB.PCI0.LPC0.SIO1.SIOS (Arg0)
            \_SB.PCI0.LPC0.SPTS (Arg0)
            IPTS (Arg0)
        }
    }

    Method (_WAK, 1, NotSerialized)  // _WAK: Wake
    {
        IWAK (Arg0)
        \_SB.PCI0.LPC0.SWAK (Arg0)
        \_SB.PCI0.LPC0.SIO1.SIOW (Arg0)
        Return (WAKP) /* \WAKP */
    }

    Scope (_GPE)
    {
        OperationRegion (TCOS, SystemIO, 0x0464, 0x02)
        Field (TCOS, ByteAcc, NoLock, WriteAsZeros)
        {
            Offset (0x01), 
                ,   1, 
            DSCI,   1
        }

        Method (_L01, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            Sleep (0xC8)
            IO80 = 0x01
            Sleep (0x0A)
            Local1 = 0x00
            If ((\_SB.PCI0.BR1A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR1A.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR1A.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x01
                Notify (\_SB.PCI0.BR1A.H000, Local0)
                Notify (\_SB.PCI0.BR1A.H001, Local0)
                Notify (\_SB.PCI0.BR1A.H002, Local0)
                Notify (\_SB.PCI0.BR1A.H003, Local0)
                Notify (\_SB.PCI0.BR1A.H004, Local0)
                Notify (\_SB.PCI0.BR1A.H005, Local0)
                Notify (\_SB.PCI0.BR1A.H006, Local0)
                Notify (\_SB.PCI0.BR1A.H007, Local0)
            }

            If ((\_SB.PCI0.BR1B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR1B.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR1B.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x02
                Notify (\_SB.PCI0.BR1B.H000, Local0)
                Notify (\_SB.PCI0.BR1B.H001, Local0)
                Notify (\_SB.PCI0.BR1B.H002, Local0)
                Notify (\_SB.PCI0.BR1B.H003, Local0)
                Notify (\_SB.PCI0.BR1B.H004, Local0)
                Notify (\_SB.PCI0.BR1B.H005, Local0)
                Notify (\_SB.PCI0.BR1B.H006, Local0)
                Notify (\_SB.PCI0.BR1B.H007, Local0)
            }

            If ((\_SB.PCI0.BR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x03
                Notify (\_SB.PCI0.BR2A.H000, Local0)
                Notify (\_SB.PCI0.BR2A.H001, Local0)
                Notify (\_SB.PCI0.BR2A.H002, Local0)
                Notify (\_SB.PCI0.BR2A.H003, Local0)
                Notify (\_SB.PCI0.BR2A.H004, Local0)
                Notify (\_SB.PCI0.BR2A.H005, Local0)
                Notify (\_SB.PCI0.BR2A.H006, Local0)
                Notify (\_SB.PCI0.BR2A.H007, Local0)
            }

            If ((\_SB.PCI0.BR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x04
                Notify (\_SB.PCI0.BR2B.H000, Local0)
                Notify (\_SB.PCI0.BR2B.H001, Local0)
                Notify (\_SB.PCI0.BR2B.H002, Local0)
                Notify (\_SB.PCI0.BR2B.H003, Local0)
                Notify (\_SB.PCI0.BR2B.H004, Local0)
                Notify (\_SB.PCI0.BR2B.H005, Local0)
                Notify (\_SB.PCI0.BR2B.H006, Local0)
                Notify (\_SB.PCI0.BR2B.H007, Local0)
            }

            If ((\_SB.PCI0.BR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x05
                Notify (\_SB.PCI0.BR2C.H000, Local0)
                Notify (\_SB.PCI0.BR2C.H001, Local0)
                Notify (\_SB.PCI0.BR2C.H002, Local0)
                Notify (\_SB.PCI0.BR2C.H003, Local0)
                Notify (\_SB.PCI0.BR2C.H004, Local0)
                Notify (\_SB.PCI0.BR2C.H005, Local0)
                Notify (\_SB.PCI0.BR2C.H006, Local0)
                Notify (\_SB.PCI0.BR2C.H007, Local0)
            }

            If ((\_SB.PCI0.BR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x06
                Notify (\_SB.PCI0.BR2D.H000, Local0)
                Notify (\_SB.PCI0.BR2D.H001, Local0)
                Notify (\_SB.PCI0.BR2D.H002, Local0)
                Notify (\_SB.PCI0.BR2D.H003, Local0)
                Notify (\_SB.PCI0.BR2D.H004, Local0)
                Notify (\_SB.PCI0.BR2D.H005, Local0)
                Notify (\_SB.PCI0.BR2D.H006, Local0)
                Notify (\_SB.PCI0.BR2D.H007, Local0)
            }

            If ((\_SB.PCI0.BR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x07
                Notify (\_SB.PCI0.BR3A.H000, Local0)
                Notify (\_SB.PCI0.BR3A.H001, Local0)
                Notify (\_SB.PCI0.BR3A.H002, Local0)
                Notify (\_SB.PCI0.BR3A.H003, Local0)
                Notify (\_SB.PCI0.BR3A.H004, Local0)
                Notify (\_SB.PCI0.BR3A.H005, Local0)
                Notify (\_SB.PCI0.BR3A.H006, Local0)
                Notify (\_SB.PCI0.BR3A.H007, Local0)
            }

            If ((\_SB.PCI0.BR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x08
                Notify (\_SB.PCI0.BR3B.H000, Local0)
                Notify (\_SB.PCI0.BR3B.H001, Local0)
                Notify (\_SB.PCI0.BR3B.H002, Local0)
                Notify (\_SB.PCI0.BR3B.H003, Local0)
                Notify (\_SB.PCI0.BR3B.H004, Local0)
                Notify (\_SB.PCI0.BR3B.H005, Local0)
                Notify (\_SB.PCI0.BR3B.H006, Local0)
                Notify (\_SB.PCI0.BR3B.H007, Local0)
            }

            If ((\_SB.PCI0.BR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x09
                Notify (\_SB.PCI0.BR3C.H000, Local0)
                Notify (\_SB.PCI0.BR3C.H001, Local0)
                Notify (\_SB.PCI0.BR3C.H002, Local0)
                Notify (\_SB.PCI0.BR3C.H003, Local0)
                Notify (\_SB.PCI0.BR3C.H004, Local0)
                Notify (\_SB.PCI0.BR3C.H005, Local0)
                Notify (\_SB.PCI0.BR3C.H006, Local0)
                Notify (\_SB.PCI0.BR3C.H007, Local0)
            }

            If ((\_SB.PCI0.BR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI0.BR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI0.BR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x0A
                Notify (\_SB.PCI0.BR3D.H000, Local0)
                Notify (\_SB.PCI0.BR3D.H001, Local0)
                Notify (\_SB.PCI0.BR3D.H002, Local0)
                Notify (\_SB.PCI0.BR3D.H003, Local0)
                Notify (\_SB.PCI0.BR3D.H004, Local0)
                Notify (\_SB.PCI0.BR3D.H005, Local0)
                Notify (\_SB.PCI0.BR3D.H006, Local0)
                Notify (\_SB.PCI0.BR3D.H007, Local0)
            }

            If ((\_SB.PCI1.QRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QRP0.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI1.QRP0.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x10
                Notify (\_SB.PCI1.QRP0.H000, Local0)
                Notify (\_SB.PCI1.QRP0.H001, Local0)
                Notify (\_SB.PCI1.QRP0.H002, Local0)
                Notify (\_SB.PCI1.QRP0.H003, Local0)
                Notify (\_SB.PCI1.QRP0.H004, Local0)
                Notify (\_SB.PCI1.QRP0.H005, Local0)
                Notify (\_SB.PCI1.QRP0.H006, Local0)
                Notify (\_SB.PCI1.QRP0.H007, Local0)
            }

            If ((\_SB.PCI1.QR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x11
                Notify (\_SB.PCI1.QR2A.H000, Local0)
                Notify (\_SB.PCI1.QR2A.H001, Local0)
                Notify (\_SB.PCI1.QR2A.H002, Local0)
                Notify (\_SB.PCI1.QR2A.H003, Local0)
                Notify (\_SB.PCI1.QR2A.H004, Local0)
                Notify (\_SB.PCI1.QR2A.H005, Local0)
                Notify (\_SB.PCI1.QR2A.H006, Local0)
                Notify (\_SB.PCI1.QR2A.H007, Local0)
            }

            If ((\_SB.PCI1.QR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x12
                Notify (\_SB.PCI1.QR2B.H000, Local0)
                Notify (\_SB.PCI1.QR2B.H001, Local0)
                Notify (\_SB.PCI1.QR2B.H002, Local0)
                Notify (\_SB.PCI1.QR2B.H003, Local0)
                Notify (\_SB.PCI1.QR2B.H004, Local0)
                Notify (\_SB.PCI1.QR2B.H005, Local0)
                Notify (\_SB.PCI1.QR2B.H006, Local0)
                Notify (\_SB.PCI1.QR2B.H007, Local0)
            }

            If ((\_SB.PCI1.QR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x13
                Notify (\_SB.PCI1.QR2C.H000, Local0)
                Notify (\_SB.PCI1.QR2C.H001, Local0)
                Notify (\_SB.PCI1.QR2C.H002, Local0)
                Notify (\_SB.PCI1.QR2C.H003, Local0)
                Notify (\_SB.PCI1.QR2C.H004, Local0)
                Notify (\_SB.PCI1.QR2C.H005, Local0)
                Notify (\_SB.PCI1.QR2C.H006, Local0)
                Notify (\_SB.PCI1.QR2C.H007, Local0)
            }

            If ((\_SB.PCI1.QR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x14
                Notify (\_SB.PCI1.QR2D.H000, Local0)
                Notify (\_SB.PCI1.QR2D.H001, Local0)
                Notify (\_SB.PCI1.QR2D.H002, Local0)
                Notify (\_SB.PCI1.QR2D.H003, Local0)
                Notify (\_SB.PCI1.QR2D.H004, Local0)
                Notify (\_SB.PCI1.QR2D.H005, Local0)
                Notify (\_SB.PCI1.QR2D.H006, Local0)
                Notify (\_SB.PCI1.QR2D.H007, Local0)
            }

            If ((\_SB.PCI1.QR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x15
                Notify (\_SB.PCI1.QR3A.H000, Local0)
                Notify (\_SB.PCI1.QR3A.H001, Local0)
                Notify (\_SB.PCI1.QR3A.H002, Local0)
                Notify (\_SB.PCI1.QR3A.H003, Local0)
                Notify (\_SB.PCI1.QR3A.H004, Local0)
                Notify (\_SB.PCI1.QR3A.H005, Local0)
                Notify (\_SB.PCI1.QR3A.H006, Local0)
                Notify (\_SB.PCI1.QR3A.H007, Local0)
            }

            If ((\_SB.PCI1.QR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x16
                Notify (\_SB.PCI1.QR3B.H000, Local0)
                Notify (\_SB.PCI1.QR3B.H001, Local0)
                Notify (\_SB.PCI1.QR3B.H002, Local0)
                Notify (\_SB.PCI1.QR3B.H003, Local0)
                Notify (\_SB.PCI1.QR3B.H004, Local0)
                Notify (\_SB.PCI1.QR3B.H005, Local0)
                Notify (\_SB.PCI1.QR3B.H006, Local0)
                Notify (\_SB.PCI1.QR3B.H007, Local0)
            }

            If ((\_SB.PCI1.QR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x17
                Notify (\_SB.PCI1.QR3C.H000, Local0)
                Notify (\_SB.PCI1.QR3C.H001, Local0)
                Notify (\_SB.PCI1.QR3C.H002, Local0)
                Notify (\_SB.PCI1.QR3C.H003, Local0)
                Notify (\_SB.PCI1.QR3C.H004, Local0)
                Notify (\_SB.PCI1.QR3C.H005, Local0)
                Notify (\_SB.PCI1.QR3C.H006, Local0)
                Notify (\_SB.PCI1.QR3C.H007, Local0)
            }

            If ((\_SB.PCI1.QR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI1.QR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI1.QR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x18
                Notify (\_SB.PCI1.QR3D.H000, Local0)
                Notify (\_SB.PCI1.QR3D.H001, Local0)
                Notify (\_SB.PCI1.QR3D.H002, Local0)
                Notify (\_SB.PCI1.QR3D.H003, Local0)
                Notify (\_SB.PCI1.QR3D.H004, Local0)
                Notify (\_SB.PCI1.QR3D.H005, Local0)
                Notify (\_SB.PCI1.QR3D.H006, Local0)
                Notify (\_SB.PCI1.QR3D.H007, Local0)
            }

            If ((\_SB.PCI2.RRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RRP0.PMEH (0x09)
            }
            Else
            {
                Local0 = \_SB.PCI2.RRP0.HPEH (0x09)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x20
                Notify (\_SB.PCI2.RRP0.H000, Local0)
                Notify (\_SB.PCI2.RRP0.H001, Local0)
                Notify (\_SB.PCI2.RRP0.H002, Local0)
                Notify (\_SB.PCI2.RRP0.H003, Local0)
                Notify (\_SB.PCI2.RRP0.H004, Local0)
                Notify (\_SB.PCI2.RRP0.H005, Local0)
                Notify (\_SB.PCI2.RRP0.H006, Local0)
                Notify (\_SB.PCI2.RRP0.H007, Local0)
            }

            If ((\_SB.PCI2.RR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x21
                Notify (\_SB.PCI2.RR2A.H000, Local0)
                Notify (\_SB.PCI2.RR2A.H001, Local0)
                Notify (\_SB.PCI2.RR2A.H002, Local0)
                Notify (\_SB.PCI2.RR2A.H003, Local0)
                Notify (\_SB.PCI2.RR2A.H004, Local0)
                Notify (\_SB.PCI2.RR2A.H005, Local0)
                Notify (\_SB.PCI2.RR2A.H006, Local0)
                Notify (\_SB.PCI2.RR2A.H007, Local0)
            }

            If ((\_SB.PCI2.RR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x22
                Notify (\_SB.PCI2.RR2B.H000, Local0)
                Notify (\_SB.PCI2.RR2B.H001, Local0)
                Notify (\_SB.PCI2.RR2B.H002, Local0)
                Notify (\_SB.PCI2.RR2B.H003, Local0)
                Notify (\_SB.PCI2.RR2B.H004, Local0)
                Notify (\_SB.PCI2.RR2B.H005, Local0)
                Notify (\_SB.PCI2.RR2B.H006, Local0)
                Notify (\_SB.PCI2.RR2B.H007, Local0)
            }

            If ((\_SB.PCI2.RR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x23
                Notify (\_SB.PCI2.RR2C.H000, Local0)
                Notify (\_SB.PCI2.RR2C.H001, Local0)
                Notify (\_SB.PCI2.RR2C.H002, Local0)
                Notify (\_SB.PCI2.RR2C.H003, Local0)
                Notify (\_SB.PCI2.RR2C.H004, Local0)
                Notify (\_SB.PCI2.RR2C.H005, Local0)
                Notify (\_SB.PCI2.RR2C.H006, Local0)
                Notify (\_SB.PCI2.RR2C.H007, Local0)
            }

            If ((\_SB.PCI2.RR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x24
                Notify (\_SB.PCI2.RR2D.H000, Local0)
                Notify (\_SB.PCI2.RR2D.H001, Local0)
                Notify (\_SB.PCI2.RR2D.H002, Local0)
                Notify (\_SB.PCI2.RR2D.H003, Local0)
                Notify (\_SB.PCI2.RR2D.H004, Local0)
                Notify (\_SB.PCI2.RR2D.H005, Local0)
                Notify (\_SB.PCI2.RR2D.H006, Local0)
                Notify (\_SB.PCI2.RR2D.H007, Local0)
            }

            If ((\_SB.PCI2.RR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x25
                Notify (\_SB.PCI2.RR3A.H000, Local0)
                Notify (\_SB.PCI2.RR3A.H001, Local0)
                Notify (\_SB.PCI2.RR3A.H002, Local0)
                Notify (\_SB.PCI2.RR3A.H003, Local0)
                Notify (\_SB.PCI2.RR3A.H004, Local0)
                Notify (\_SB.PCI2.RR3A.H005, Local0)
                Notify (\_SB.PCI2.RR3A.H006, Local0)
                Notify (\_SB.PCI2.RR3A.H007, Local0)
            }

            If ((\_SB.PCI2.RR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x26
                Notify (\_SB.PCI2.RR3B.H000, Local0)
                Notify (\_SB.PCI2.RR3B.H001, Local0)
                Notify (\_SB.PCI2.RR3B.H002, Local0)
                Notify (\_SB.PCI2.RR3B.H003, Local0)
                Notify (\_SB.PCI2.RR3B.H004, Local0)
                Notify (\_SB.PCI2.RR3B.H005, Local0)
                Notify (\_SB.PCI2.RR3B.H006, Local0)
                Notify (\_SB.PCI2.RR3B.H007, Local0)
            }

            If ((\_SB.PCI2.RR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x27
                Notify (\_SB.PCI2.RR3C.H000, Local0)
                Notify (\_SB.PCI2.RR3C.H001, Local0)
                Notify (\_SB.PCI2.RR3C.H002, Local0)
                Notify (\_SB.PCI2.RR3C.H003, Local0)
                Notify (\_SB.PCI2.RR3C.H004, Local0)
                Notify (\_SB.PCI2.RR3C.H005, Local0)
                Notify (\_SB.PCI2.RR3C.H006, Local0)
                Notify (\_SB.PCI2.RR3C.H007, Local0)
            }

            If ((\_SB.PCI2.RR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI2.RR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI2.RR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x28
                Notify (\_SB.PCI2.RR3D.H000, Local0)
                Notify (\_SB.PCI2.RR3D.H001, Local0)
                Notify (\_SB.PCI2.RR3D.H002, Local0)
                Notify (\_SB.PCI2.RR3D.H003, Local0)
                Notify (\_SB.PCI2.RR3D.H004, Local0)
                Notify (\_SB.PCI2.RR3D.H005, Local0)
                Notify (\_SB.PCI2.RR3D.H006, Local0)
                Notify (\_SB.PCI2.RR3D.H007, Local0)
            }

            If ((\_SB.PCI3.SRP0.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SRP0.PMEH (0x00)
            }
            Else
            {
                Local0 = \_SB.PCI3.SRP0.HPEH (0x00)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x30
                Notify (\_SB.PCI3.SRP0.H000, Local0)
                Notify (\_SB.PCI3.SRP0.H001, Local0)
                Notify (\_SB.PCI3.SRP0.H002, Local0)
                Notify (\_SB.PCI3.SRP0.H003, Local0)
                Notify (\_SB.PCI3.SRP0.H004, Local0)
                Notify (\_SB.PCI3.SRP0.H005, Local0)
                Notify (\_SB.PCI3.SRP0.H006, Local0)
                Notify (\_SB.PCI3.SRP0.H007, Local0)
            }

            If ((\_SB.PCI3.SR2A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2A.PMEH (0x01)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2A.HPEH (0x01)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x31
                Notify (\_SB.PCI3.SR2A.H000, Local0)
                Notify (\_SB.PCI3.SR2A.H001, Local0)
                Notify (\_SB.PCI3.SR2A.H002, Local0)
                Notify (\_SB.PCI3.SR2A.H003, Local0)
                Notify (\_SB.PCI3.SR2A.H004, Local0)
                Notify (\_SB.PCI3.SR2A.H005, Local0)
                Notify (\_SB.PCI3.SR2A.H006, Local0)
                Notify (\_SB.PCI3.SR2A.H007, Local0)
            }

            If ((\_SB.PCI3.SR2B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2B.PMEH (0x02)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2B.HPEH (0x02)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x32
                Notify (\_SB.PCI3.SR2B.H000, Local0)
                Notify (\_SB.PCI3.SR2B.H001, Local0)
                Notify (\_SB.PCI3.SR2B.H002, Local0)
                Notify (\_SB.PCI3.SR2B.H003, Local0)
                Notify (\_SB.PCI3.SR2B.H004, Local0)
                Notify (\_SB.PCI3.SR2B.H005, Local0)
                Notify (\_SB.PCI3.SR2B.H006, Local0)
                Notify (\_SB.PCI3.SR2B.H007, Local0)
            }

            If ((\_SB.PCI3.SR2C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2C.PMEH (0x03)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2C.HPEH (0x03)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x33
                Notify (\_SB.PCI3.SR2C.H000, Local0)
                Notify (\_SB.PCI3.SR2C.H001, Local0)
                Notify (\_SB.PCI3.SR2C.H002, Local0)
                Notify (\_SB.PCI3.SR2C.H003, Local0)
                Notify (\_SB.PCI3.SR2C.H004, Local0)
                Notify (\_SB.PCI3.SR2C.H005, Local0)
                Notify (\_SB.PCI3.SR2C.H006, Local0)
                Notify (\_SB.PCI3.SR2C.H007, Local0)
            }

            If ((\_SB.PCI3.SR2D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR2D.PMEH (0x04)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR2D.HPEH (0x04)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x34
                Notify (\_SB.PCI3.SR2D.H000, Local0)
                Notify (\_SB.PCI3.SR2D.H001, Local0)
                Notify (\_SB.PCI3.SR2D.H002, Local0)
                Notify (\_SB.PCI3.SR2D.H003, Local0)
                Notify (\_SB.PCI3.SR2D.H004, Local0)
                Notify (\_SB.PCI3.SR2D.H005, Local0)
                Notify (\_SB.PCI3.SR2D.H006, Local0)
                Notify (\_SB.PCI3.SR2D.H007, Local0)
            }

            If ((\_SB.PCI3.SR3A.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3A.PMEH (0x05)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3A.HPEH (0x05)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x35
                Notify (\_SB.PCI3.SR3A.H000, Local0)
                Notify (\_SB.PCI3.SR3A.H001, Local0)
                Notify (\_SB.PCI3.SR3A.H002, Local0)
                Notify (\_SB.PCI3.SR3A.H003, Local0)
                Notify (\_SB.PCI3.SR3A.H004, Local0)
                Notify (\_SB.PCI3.SR3A.H005, Local0)
                Notify (\_SB.PCI3.SR3A.H006, Local0)
                Notify (\_SB.PCI3.SR3A.H007, Local0)
            }

            If ((\_SB.PCI3.SR3B.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3B.PMEH (0x06)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3B.HPEH (0x06)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x36
                Notify (\_SB.PCI3.SR3B.H000, Local0)
                Notify (\_SB.PCI3.SR3B.H001, Local0)
                Notify (\_SB.PCI3.SR3B.H002, Local0)
                Notify (\_SB.PCI3.SR3B.H003, Local0)
                Notify (\_SB.PCI3.SR3B.H004, Local0)
                Notify (\_SB.PCI3.SR3B.H005, Local0)
                Notify (\_SB.PCI3.SR3B.H006, Local0)
                Notify (\_SB.PCI3.SR3B.H007, Local0)
            }

            If ((\_SB.PCI3.SR3C.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3C.PMEH (0x07)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3C.HPEH (0x07)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x37
                Notify (\_SB.PCI3.SR3C.H000, Local0)
                Notify (\_SB.PCI3.SR3C.H001, Local0)
                Notify (\_SB.PCI3.SR3C.H002, Local0)
                Notify (\_SB.PCI3.SR3C.H003, Local0)
                Notify (\_SB.PCI3.SR3C.H004, Local0)
                Notify (\_SB.PCI3.SR3C.H005, Local0)
                Notify (\_SB.PCI3.SR3C.H006, Local0)
                Notify (\_SB.PCI3.SR3C.H007, Local0)
            }

            If ((\_SB.PCI3.SR3D.PMEP == 0x01))
            {
                Local0 = \_SB.PCI3.SR3D.PMEH (0x08)
            }
            Else
            {
                Local0 = \_SB.PCI3.SR3D.HPEH (0x08)
            }

            If ((Local0 != 0xFF))
            {
                Local1 = 0x38
                Notify (\_SB.PCI3.SR3D.H000, Local0)
                Notify (\_SB.PCI3.SR3D.H001, Local0)
                Notify (\_SB.PCI3.SR3D.H002, Local0)
                Notify (\_SB.PCI3.SR3D.H003, Local0)
                Notify (\_SB.PCI3.SR3D.H004, Local0)
                Notify (\_SB.PCI3.SR3D.H005, Local0)
                Notify (\_SB.PCI3.SR3D.H006, Local0)
                Notify (\_SB.PCI3.SR3D.H007, Local0)
            }

            If ((Local0 != 0x00))
            {
                If ((Local1 == 0x01))
                {
                    \_SB.PCI0.BR1A.PMES = 0x01
                    \_SB.PCI0.BR1A.PMEP = 0x01
                }

                If ((Local1 == 0x02))
                {
                    \_SB.PCI0.BR1B.PMES = 0x01
                    \_SB.PCI0.BR1B.PMEP = 0x01
                }

                If ((Local1 == 0x03))
                {
                    \_SB.PCI0.BR2A.PMES = 0x01
                    \_SB.PCI0.BR2A.PMEP = 0x01
                }

                If ((Local1 == 0x04))
                {
                    \_SB.PCI0.BR2B.PMES = 0x01
                    \_SB.PCI0.BR2B.PMEP = 0x01
                }

                If ((Local1 == 0x05))
                {
                    \_SB.PCI0.BR2C.PMES = 0x01
                    \_SB.PCI0.BR2C.PMEP = 0x01
                }

                If ((Local1 == 0x06))
                {
                    \_SB.PCI0.BR2D.PMES = 0x01
                    \_SB.PCI0.BR2D.PMEP = 0x01
                }

                If ((Local1 == 0x07))
                {
                    \_SB.PCI0.BR3A.PMES = 0x01
                    \_SB.PCI0.BR3A.PMEP = 0x01
                }

                If ((Local1 == 0x08))
                {
                    \_SB.PCI0.BR3B.PMES = 0x01
                    \_SB.PCI0.BR3B.PMEP = 0x01
                }

                If ((Local1 == 0x09))
                {
                    \_SB.PCI0.BR3C.PMES = 0x01
                    \_SB.PCI0.BR3C.PMEP = 0x01
                }

                If ((Local1 == 0x0A))
                {
                    \_SB.PCI0.BR3D.PMES = 0x01
                    \_SB.PCI0.BR3D.PMEP = 0x01
                }

                If ((Local1 == 0x10))
                {
                    \_SB.PCI1.QRP0.PMES = 0x01
                    \_SB.PCI1.QRP0.PMEP = 0x01
                }

                If ((Local1 == 0x11))
                {
                    \_SB.PCI1.QR2A.PMES = 0x01
                    \_SB.PCI1.QR2A.PMEP = 0x01
                }

                If ((Local1 == 0x12))
                {
                    \_SB.PCI1.QR2B.PMES = 0x01
                    \_SB.PCI1.QR2B.PMEP = 0x01
                }

                If ((Local1 == 0x13))
                {
                    \_SB.PCI1.QR2C.PMES = 0x01
                    \_SB.PCI1.QR2C.PMEP = 0x01
                }

                If ((Local1 == 0x14))
                {
                    \_SB.PCI1.QR2D.PMES = 0x01
                    \_SB.PCI1.QR2D.PMEP = 0x01
                }

                If ((Local1 == 0x15))
                {
                    \_SB.PCI1.QR3A.PMES = 0x01
                    \_SB.PCI1.QR3A.PMEP = 0x01
                }

                If ((Local1 == 0x16))
                {
                    \_SB.PCI1.QR3B.PMES = 0x01
                    \_SB.PCI1.QR3B.PMEP = 0x01
                }

                If ((Local1 == 0x17))
                {
                    \_SB.PCI1.QR3C.PMES = 0x01
                    \_SB.PCI1.QR3C.PMEP = 0x01
                }

                If ((Local1 == 0x18))
                {
                    \_SB.PCI1.QR3D.PMES = 0x01
                    \_SB.PCI1.QR3D.PMEP = 0x01
                }

                If ((Local1 == 0x20))
                {
                    \_SB.PCI2.RRP0.PMES = 0x01
                    \_SB.PCI2.RRP0.PMEP = 0x01
                }

                If ((Local1 == 0x21))
                {
                    \_SB.PCI2.RR2A.PMES = 0x01
                    \_SB.PCI2.RR2A.PMEP = 0x01
                }

                If ((Local1 == 0x22))
                {
                    \_SB.PCI2.RR2B.PMES = 0x01
                    \_SB.PCI2.RR2B.PMEP = 0x01
                }

                If ((Local1 == 0x23))
                {
                    \_SB.PCI2.RR2C.PMES = 0x01
                    \_SB.PCI2.RR2C.PMEP = 0x01
                }

                If ((Local1 == 0x24))
                {
                    \_SB.PCI2.RR2D.PMES = 0x01
                    \_SB.PCI2.RR2D.PMEP = 0x01
                }

                If ((Local1 == 0x25))
                {
                    \_SB.PCI2.RR3A.PMES = 0x01
                    \_SB.PCI2.RR3A.PMEP = 0x01
                }

                If ((Local1 == 0x26))
                {
                    \_SB.PCI2.RR3B.PMES = 0x01
                    \_SB.PCI2.RR3B.PMEP = 0x01
                }

                If ((Local1 == 0x27))
                {
                    \_SB.PCI2.RR3C.PMES = 0x01
                    \_SB.PCI2.RR3C.PMEP = 0x01
                }

                If ((Local1 == 0x28))
                {
                    \_SB.PCI2.RR3D.PMES = 0x01
                    \_SB.PCI2.RR3D.PMEP = 0x01
                }

                If ((Local1 == 0x30))
                {
                    \_SB.PCI3.SRP0.PMES = 0x01
                    \_SB.PCI3.SRP0.PMEP = 0x01
                }

                If ((Local1 == 0x31))
                {
                    \_SB.PCI3.SR2A.PMES = 0x01
                    \_SB.PCI3.SR2A.PMEP = 0x01
                }

                If ((Local1 == 0x32))
                {
                    \_SB.PCI3.SR2B.PMES = 0x01
                    \_SB.PCI3.SR2B.PMEP = 0x01
                }

                If ((Local1 == 0x33))
                {
                    \_SB.PCI3.SR2C.PMES = 0x01
                    \_SB.PCI3.SR2C.PMEP = 0x01
                }

                If ((Local1 == 0x34))
                {
                    \_SB.PCI3.SR2D.PMES = 0x01
                    \_SB.PCI3.SR2D.PMEP = 0x01
                }

                If ((Local1 == 0x35))
                {
                    \_SB.PCI3.SR3A.PMES = 0x01
                    \_SB.PCI3.SR3A.PMEP = 0x01
                }

                If ((Local1 == 0x36))
                {
                    \_SB.PCI3.SR3B.PMES = 0x01
                    \_SB.PCI3.SR3B.PMEP = 0x01
                }

                If ((Local1 == 0x37))
                {
                    \_SB.PCI3.SR3C.PMES = 0x01
                    \_SB.PCI3.SR3C.PMEP = 0x01
                }

                If ((Local1 == 0x38))
                {
                    \_SB.PCI3.SR3D.PMES = 0x01
                    \_SB.PCI3.SR3D.PMEP = 0x01
                }

                PEES = 0x01
                PMEE = 0x00
            }
        }

        Method (_L09, 0, NotSerialized)  // _Lxx: Level-Triggered GPE, xx=0x00-0xFF
        {
            If ((\_SB.PCI0.RP01.DEVS () != 0x00))
            {
                \_SB.PCI0.RP01.HPME ()
                Notify (\_SB.PCI0.RP01, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP02.DEVS () != 0x00))
            {
                \_SB.PCI0.RP02.HPME ()
                Notify (\_SB.PCI0.RP02, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP03.DEVS () != 0x00))
            {
                \_SB.PCI0.RP03.HPME ()
                Notify (\_SB.PCI0.RP03, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP04.DEVS () != 0x00))
            {
                \_SB.PCI0.RP04.HPME ()
                Notify (\_SB.PCI0.RP04, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP05.DEVS () != 0x00))
            {
                \_SB.PCI0.RP05.HPME ()
                Notify (\_SB.PCI0.RP05, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP06.DEVS () != 0x00))
            {
                \_SB.PCI0.RP06.HPME ()
                Notify (\_SB.PCI0.RP06, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP07.DEVS () != 0x00))
            {
                \_SB.PCI0.RP07.HPME ()
                Notify (\_SB.PCI0.RP07, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.RP08.DEVS () != 0x00))
            {
                \_SB.PCI0.RP08.HPME ()
                Notify (\_SB.PCI0.RP08, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI0.BR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI0.BR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI1.QR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI1.QR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI2.RR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI2.RR3D, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SRP0.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SRP0, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR1A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR1A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR1B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR1B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2C, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR2D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR2D, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3A.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3A, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3B.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3B, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3C.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3C, 0x02) // Device Wake
            }

            If ((\_SB.PCI3.SR3D.DEVS () != 0x00))
            {
                Notify (\_SB.PCI3.SR3D, 0x02) // Device Wake
            }
        }
    }

    OperationRegion (_SB.PCI0.LPC0.PIX0, PCI_Config, 0x60, 0x0C)
    Field (\_SB.PCI0.LPC0.PIX0, ByteAcc, NoLock, Preserve)
    {
        PIRA,   8, 
        PIRB,   8, 
        PIRC,   8, 
        PIRD,   8, 
        Offset (0x08), 
        PIRE,   8, 
        PIRF,   8, 
        PIRG,   8, 
        PIRH,   8
    }

    Scope (_SB)
    {
        Name (BUFA, ResourceTemplate ()
        {
            IRQ (Level, ActiveLow, Shared, _Y10)
                {15}
        })
        CreateWordField (BUFA, \_SB._Y10._INT, IRA0)  // _INT: Interrupts
        Device (LNKA)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x01)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRA & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSA) /* \_SB_.PRSA */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRA |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRA & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRA = Local0
            }
        }

        Device (LNKB)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x02)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRB & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSB) /* \_SB_.PRSB */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRB |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRB & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRB = Local0
            }
        }

        Device (LNKC)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x03)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRC & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSC) /* \_SB_.PRSC */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRC |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRC & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRC = Local0
            }
        }

        Device (LNKD)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x04)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRD & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSD) /* \_SB_.PRSD */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRD |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRD & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRD = Local0
            }
        }

        Device (LNKE)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x05)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRE & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSE) /* \_SB_.PRSE */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRE |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRE & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRE = Local0
            }
        }

        Device (LNKF)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x06)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRF & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSF) /* \_SB_.PRSF */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRF |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRF & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRF = Local0
            }
        }

        Device (LNKG)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x07)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRG & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSG) /* \_SB_.PRSG */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRG |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRG & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRG = Local0
            }
        }

        Device (LNKH)
        {
            Name (_HID, EisaId ("PNP0C0F") /* PCI Interrupt Link Device */)  // _HID: Hardware ID
            Name (_UID, 0x08)  // _UID: Unique ID
            Method (_STA, 0, NotSerialized)  // _STA: Status
            {
                Local0 = (PIRH & 0x80)
                If (Local0)
                {
                    Return (0x09)
                }
                Else
                {
                    Return (0x0B)
                }
            }

            Method (_PRS, 0, NotSerialized)  // _PRS: Possible Resource Settings
            {
                Return (PRSH) /* \_SB_.PRSH */
            }

            Method (_DIS, 0, NotSerialized)  // _DIS: Disable Device
            {
                PIRH |= 0x80
            }

            Method (_CRS, 0, NotSerialized)  // _CRS: Current Resource Settings
            {
                Local0 = (PIRH & 0x0F)
                IRA0 = (0x01 << Local0)
                Return (BUFA) /* \_SB_.BUFA */
            }

            Method (_SRS, 1, NotSerialized)  // _SRS: Set Resource Settings
            {
                CreateWordField (Arg0, 0x01, IRA)
                FindSetRightBit (IRA, Local0)
                Local0--
                PIRH = Local0
            }
        }
    }

    Scope (_SB)
    {
        Name (XCPD, 0x00)
        Name (XNPT, 0x01)
        Name (XCAP, 0x02)
        Name (XDCP, 0x04)
        Name (XDCT, 0x08)
        Name (XDST, 0x0A)
        Name (XLCP, 0x0C)
        Name (XLCT, 0x10)
        Name (XLST, 0x12)
        Name (XSCP, 0x14)
        Name (XSCT, 0x18)
        Name (XSST, 0x1A)
        Name (XRCT, 0x1C)
        Mutex (MUTE, 0x00)
        Method (RBPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RBPE.XCFG */
        }

        Method (RWPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RWPE.XCFG */
        }

        Method (RDPE, 1, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Release (MUTE)
            Return (XCFG) /* \_SB_.RDPE.XCFG */
        }

        Method (WBPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x0FFF)
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x01)
            Field (PCFG, ByteAcc, NoLock, Preserve)
            {
                XCFG,   8
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WWPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFE
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x02)
            Field (PCFG, WordAcc, NoLock, Preserve)
            {
                XCFG,   16
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (WDPE, 2, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            XCFG = Arg1
            Release (MUTE)
        }

        Method (RWDP, 3, NotSerialized)
        {
            Acquire (MUTE, 0x03E8)
            Arg0 &= 0xFFFFFFFC
            Local0 = (Arg0 + PEBS) /* \PEBS */
            OperationRegion (PCFG, SystemMemory, Local0, 0x04)
            Field (PCFG, DWordAcc, NoLock, Preserve)
            {
                XCFG,   32
            }

            Local1 = (XCFG & Arg2)
            XCFG = (Local1 | Arg1)
            Release (MUTE)
        }

        Method (RPME, 1, NotSerialized)
        {
            Local0 = (Arg0 + 0x84)
            Local1 = RDPE (Local0)
            If ((Local1 == 0xFFFFFFFF))
            {
                Return (0x00)
            }
            Else
            {
                If ((Local1 && 0x00010000))
                {
                    WDPE (Local0, (Local1 & 0x00010000))
                    Return (0x01)
                }

                Return (0x00)
            }
        }
    }

    Scope (_SB.PCI0.BR1A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x01, 
                        Unicode (" Slot01 x8")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR2A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x06, 
                        Unicode (" Slot06 x16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI0.BR3A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x04, 
                        Unicode (" Slot04 x16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI1.QR1A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x05, 
                        Unicode (" Slot05 x8")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }

    Scope (_SB.PCI1.QR2A)
    {
        Method (_DSM, 4, NotSerialized)  // _DSM: Device-Specific Method
        {
            If ((Arg0 == ToUUID ("e5c937d0-3553-4d7a-9117-ea4d19c3434d") /* Device Labeling Interface */))
            {
                If (((Arg1 == 0x02) && (Arg2 == 0x00)))
                {
                    Return (Buffer (0x01)
                    {
                         0x80                                             // .
                    })
                }

                If (((Arg1 == 0x02) && (Arg2 == 0x07)))
                {
                    Return (Package (0x02)
                    {
                        0x02, 
                        Unicode (" Slot02 x16")
                    })
                }
            }

            Return (Buffer (0x01)
            {
                 0x00                                             // .
            })
        }
    }
}

